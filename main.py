import telebot
from telebot import types
from datetime import datetime, timedelta
import threading
import time
import json
import os
from collections import Counter
import base64
import requests

# –¢–æ–∫–µ–Ω —Ç–≤–æ–≥–æ –±–æ—Ç–∞ (–æ—Ç—Ä–∏–º–∞–π —É @BotFather)
BOT_TOKEN = "7820077415:AAG7yXnwfwlNyQXQ6AWjwin7eTPuczoj4LY"

bot = telebot.TeleBot(BOT_TOKEN)

# GitHub –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN", "").strip()
GITHUB_REPO = os.getenv("GITHUB_REPO", "—Ç–≤—ñ–π_username/—Ç–≤—ñ–π_—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π").strip()
# –°—Ö–æ–≤–∏—â–µ –∑—É—Å—Ç—Ä—ñ—á–µ–π, —Å—Ç–∞–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
meetings = {}
user_states = {}
user_settings = {}
meetings_history = {}
DATA_FILE = "meetings_data.json"
SETTINGS_FILE = "user_settings.json"
HISTORY_FILE = "meetings_history.json"


# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è GitHub ---
def save_file_to_github(file_path):
    """
    –ó–±–µ—Ä—ñ–≥–∞—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π JSON —Ñ–∞–π–ª —É GitHub
    """
    token = GITHUB_TOKEN
    repo = GITHUB_REPO
    
    if not token:
        return
    
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read()
        
        url = f"https://api.github.com/repos/{repo}/contents/{file_path}"
        headers = {"Authorization": f"Bearer {token}"}
        
        # –û—Ç—Ä–∏–º—É—î–º–æ SHA –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª—É
        r = requests.get(url, headers=headers)
        sha = r.json().get("sha") if r.status_code == 200 else None
        
        # –ö–æ–¥—É—î–º–æ —Ñ–∞–π–ª —É Base64
        encoded_content = base64.b64encode(content.encode("utf-8")).decode("utf-8")
        
        data = {
            "message": f"update {file_path}",
            "content": encoded_content,
            "sha": sha
        }
        
        response = requests.put(url, headers=headers, json=data)
        if response.status_code in (200, 201):
            print(f"‚úÖ {file_path} —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ —É GitHub")
        else:
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ {file_path} —É GitHub: {response.text}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ {file_path} –≤ GitHub: {e}")

def load_file_from_github(file_path):
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π JSON —Ñ–∞–π–ª –∑ GitHub
    """
    token = GITHUB_TOKEN
    repo = GITHUB_REPO
    
    if not token:
        return None
    
    url = f"https://api.github.com/repos/{repo}/contents/{file_path}"
    headers = {"Authorization": f"Bearer {token}"}
    
    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            content = response.json()
            decoded = base64.b64decode(content["content"]).decode("utf-8")
            print(f"‚úÖ {file_path} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ GitHub")
            return json.loads(decoded)
        else:
            return None
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ {file_path} –∑ GitHub: {e}")
        return None
# –ü—Ä–µ–¥–≤–∏–∑–Ω–∞—á–µ–Ω—ñ —Ç–µ–≥–∏ –∑ –µ–º–æ–¥–∑—ñ
TAGS = {
    '—Ä–æ–±–æ—Ç–∞': 'üíº',
    '–æ—Å–æ–±–∏—Å—Ç–µ': 'üë§',
    '—Å–ø–æ—Ä—Ç': '‚öΩ',
    '–Ω–∞–≤—á–∞–Ω–Ω—è': 'üìö',
    '–∑–¥–æ—Ä–æ–≤\'—è': 'üè•',
    '—Å—ñ–º\'—è': 'üë®‚Äçüë©‚Äçüëß',
    '–ø–æ–∫—É–ø–∫–∏': 'üõí',
    '–≤–∞–∂–ª–∏–≤–µ': '‚≠ê'
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —á–∏ –¥—ñ—î –ª—ñ—Ç–Ω—ñ–π —á–∞—Å –≤ –Ñ–≤—Ä–æ–ø—ñ/–£–∫—Ä–∞—ó–Ω—ñ
def is_dst_active_europe():
    """
    –õ—ñ—Ç–Ω—ñ–π —á–∞—Å –≤ –Ñ–≤—Ä–æ–ø—ñ: –æ—Å—Ç–∞–Ω–Ω—î –≤–æ—Å–∫—Ä–µ—Å–µ–Ω–Ω—è –±–µ—Ä–µ–∑–Ω—è (03:00) - –æ—Å—Ç–∞–Ω–Ω—î –≤–æ—Å–∫—Ä–µ—Å–µ–Ω–Ω—è –∂–æ–≤—Ç–Ω—è (04:00)
    """
    now = datetime.utcnow()
    year = now.year
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—î –≤–æ—Å–∫—Ä–µ—Å–µ–Ω–Ω—è –±–µ—Ä–µ–∑–Ω—è
    march_last_day = datetime(year, 3, 31)
    while march_last_day.weekday() != 6:  # 6 = –Ω–µ–¥—ñ–ª—è
        march_last_day -= timedelta(days=1)
    dst_start = march_last_day.replace(hour=1, minute=0, second=0, microsecond=0)
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—î –≤–æ—Å–∫—Ä–µ—Å–µ–Ω–Ω—è –∂–æ–≤—Ç–Ω—è
    october_last_day = datetime(year, 10, 31)
    while october_last_day.weekday() != 6:
        october_last_day -= timedelta(days=1)
    dst_end = october_last_day.replace(hour=1, minute=0, second=0, microsecond=0)
    
    return dst_start <= now < dst_end

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —á–∏ –¥—ñ—î –ª—ñ—Ç–Ω—ñ–π —á–∞—Å –≤ –°–®–ê/–ö–∞–Ω–∞–¥—ñ
def is_dst_active_north_america():
    """
    –õ—ñ—Ç–Ω—ñ–π —á–∞—Å –≤ –ü—ñ–≤–Ω—ñ—á–Ω—ñ–π –ê–º–µ—Ä–∏—Ü—ñ: –¥—Ä—É–≥–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω–Ω—è –±–µ—Ä–µ–∑–Ω—è - –ø–µ—Ä—à–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω–Ω—è –ª–∏—Å—Ç–æ–ø–∞–¥–∞
    """
    now = datetime.utcnow()
    year = now.year
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥—Ä—É–≥–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω–Ω—è –±–µ—Ä–µ–∑–Ω—è
    march_first = datetime(year, 3, 1)
    days_until_sunday = (6 - march_first.weekday()) % 7
    first_sunday = march_first + timedelta(days=days_until_sunday)
    dst_start = first_sunday + timedelta(days=7, hours=2)
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–µ—Ä—à–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω–Ω—è –ª–∏—Å—Ç–æ–ø–∞–¥–∞
    november_first = datetime(year, 11, 1)
    days_until_sunday = (6 - november_first.weekday()) % 7
    first_sunday_nov = november_first + timedelta(days=days_until_sunday)
    dst_end = first_sunday_nov.replace(hour=2, minute=0, second=0, microsecond=0)
    
    return dst_start <= now < dst_end

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —á–∏ –¥—ñ—î –ª—ñ—Ç–Ω—ñ–π —á–∞—Å –≤ –ê–≤—Å—Ç—Ä–∞–ª—ñ—ó/–ù–æ–≤—ñ–π –ó–µ–ª–∞–Ω–¥—ñ—ó
def is_dst_active_australia():
    """
    –õ—ñ—Ç–Ω—ñ–π —á–∞—Å –≤ –ê–≤—Å—Ç—Ä–∞–ª—ñ—ó: –ø–µ—Ä—à–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω–Ω—è –∂–æ–≤—Ç–Ω—è - –ø–µ—Ä—à–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω–Ω—è –∫–≤—ñ—Ç–Ω—è
    """
    now = datetime.utcnow()
    year = now.year
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–µ—Ä—à–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω–Ω—è –∂–æ–≤—Ç–Ω—è
    october_first = datetime(year, 10, 1)
    days_until_sunday = (6 - october_first.weekday()) % 7
    first_sunday_oct = october_first + timedelta(days=days_until_sunday)
    dst_start = first_sunday_oct.replace(hour=2, minute=0, second=0, microsecond=0)
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–µ—Ä—à–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω–Ω—è –∫–≤—ñ—Ç–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–æ–∫—É
    april_first = datetime(year + 1, 4, 1)
    days_until_sunday = (6 - april_first.weekday()) % 7
    first_sunday_apr = april_first + timedelta(days=days_until_sunday)
    dst_end = first_sunday_apr.replace(hour=2, minute=0, second=0, microsecond=0)
    
    # –ê–≤—Å—Ç—Ä–∞–ª—ñ–π—Å—å–∫–∏–π –ª—ñ—Ç–Ω—ñ–π —á–∞—Å –ø—Ä–∞—Ü—é—î "–Ω–∞–≤–ø–∞–∫–∏" (–∂–æ–≤—Ç–µ–Ω—å-–∫–≤—ñ—Ç–µ–Ω—å)
    return now >= dst_start or now < dst_end

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö —á–∞—Å–æ–≤–∏—Ö –ø–æ—è—Å—ñ–≤ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º DST
def get_popular_timezones():
    europe_dst = is_dst_active_europe()
    na_dst = is_dst_active_north_america()
    aus_dst = is_dst_active_australia()
    
    timezones = []
    
    # –ü—ñ–≤–Ω—ñ—á–Ω–∞ –ê–º–µ—Ä–∏–∫–∞
    if na_dst:
        timezones.extend([
            (-7, "UTC-7 (–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å) ‚è∞"),
            (-6, "UTC-6 (–î–µ–Ω–≤–µ—Ä) ‚è∞"),
            (-5, "UTC-5 (–ù—å—é-–ô–æ—Ä–∫, –ú–µ—Ö—ñ–∫–æ) ‚è∞"),
            (-4, "UTC-4 (–ö–∞—Ä–∞–∫–∞—Å)")
        ])
    else:
        timezones.extend([
            (-8, "UTC-8 (–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å) ‚ùÑÔ∏è"),
            (-7, "UTC-7 (–î–µ–Ω–≤–µ—Ä) ‚ùÑÔ∏è"),
            (-6, "UTC-6 (–ù—å—é-–ô–æ—Ä–∫, –ú–µ—Ö—ñ–∫–æ) ‚ùÑÔ∏è"),  
            (-5, "UTC-5 (–ö–∞—Ä–∞–∫–∞—Å)")
        ])
    
    # –ü—ñ–≤–¥–µ–Ω–Ω–∞ –ê–º–µ—Ä–∏–∫–∞
    timezones.append((-3, "UTC-3 (–ë—É–µ–Ω–æ—Å-–ê–π—Ä–µ—Å, –°–∞–Ω-–ü–∞—É–ª—É)"))
    
    # –Ñ–≤—Ä–æ–ø–∞
    if europe_dst:
        timezones.extend([
            (1, "UTC+1 (–õ–æ–Ω–¥–æ–Ω, –î—É–±–ª—ñ–Ω) ‚è∞"),
            (2, "UTC+2 (–ü–∞—Ä–∏–∂, –ë–µ—Ä–ª—ñ–Ω, –†–∏–º) ‚è∞"),
            (3, "UTC+3 (–ö–∏—ó–≤, –ê—Ñ—ñ–Ω–∏) ‚è∞")
        ])
    else:
        timezones.extend([
            (0, "UTC (–õ–æ–Ω–¥–æ–Ω, –î—É–±–ª—ñ–Ω) ‚ùÑÔ∏è"),
            (1, "UTC+1 (–ü–∞—Ä–∏–∂, –ë–µ—Ä–ª—ñ–Ω, –†–∏–º) ‚ùÑÔ∏è"),
            (2, "UTC+2 (–ö–∏—ó–≤, –ê—Ñ—ñ–Ω–∏) ‚ùÑÔ∏è")
        ])
    
    # –ë–ª–∏–∑—å–∫–∏–π –°—Ö—ñ–¥ —Ç–∞ –ê–∑—ñ—è (–±–µ–∑ DST)
    timezones.extend([
        (3, "UTC+3 (–ï—Ä-–†—ñ—è–¥)"),
        (4, "UTC+4 (–î—É–±–∞–π, –ë–∞–∫—É)"),
        (5, "UTC+5 (–¢–∞—à–∫–µ–Ω—Ç, –ö–∞—Ä–∞—á—ñ)"),
        (6, "UTC+6 (–ê–ª–º–∞—Ç–∏, –î–∞–∫–∫–∞)"),
        (7, "UTC+7 (–ë–∞–Ω–≥–∫–æ–∫, –•–∞–Ω–æ–π)"),
        (8, "UTC+8 (–ü–µ–∫—ñ–Ω, –°—ñ–Ω–≥–∞–ø—É—Ä, –ì–æ–Ω–∫–æ–Ω–≥)"),
        (9, "UTC+9 (–¢–æ–∫—ñ–æ, –°–µ—É–ª)")
    ])
    
    # –ê–≤—Å—Ç—Ä–∞–ª—ñ—è —Ç–∞ –û–∫–µ–∞–Ω—ñ—è
    if aus_dst:
        timezones.extend([
            (11, "UTC+11 (–°—ñ–¥–Ω–µ–π, –ú–µ–ª—å–±—É—Ä–Ω) ‚è∞"),
            (13, "UTC+13 (–û–∫–ª–µ–Ω–¥) ‚è∞")
        ])
    else:
        timezones.extend([
            (10, "UTC+10 (–°—ñ–¥–Ω–µ–π, –ú–µ–ª—å–±—É—Ä–Ω) ‚ùÑÔ∏è"),
            (12, "UTC+12 (–û–∫–ª–µ–Ω–¥) ‚ùÑÔ∏è")
        ])
    
    return timezones

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä—è–¥–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å—É
def get_timezone_string(tz_offset):
    europe_dst = is_dst_active_europe()
    na_dst = is_dst_active_north_america()
    aus_dst = is_dst_active_australia()
    
    # –Ñ–≤—Ä–æ–ø–∞
    if tz_offset == 0 and not europe_dst:
        return "UTC (–õ–æ–Ω–¥–æ–Ω) ‚ùÑÔ∏è"
    elif tz_offset == 1 and europe_dst:
        return "UTC+1 (–õ–æ–Ω–¥–æ–Ω) ‚è∞"
    elif tz_offset == 1 and not europe_dst:
        return "UTC+1 (–ü–∞—Ä–∏–∂, –ë–µ—Ä–ª—ñ–Ω) ‚ùÑÔ∏è"
    elif tz_offset == 2 and europe_dst:
        return "UTC+2 (–ü–∞—Ä–∏–∂, –ë–µ—Ä–ª—ñ–Ω) ‚è∞"
    elif tz_offset == 2 and not europe_dst:
        return "UTC+2 (–ö–∏—ó–≤, –ê—Ñ—ñ–Ω–∏) ‚ùÑÔ∏è"
    elif tz_offset == 3 and europe_dst:
        return "UTC+3 (–ö–∏—ó–≤, –ê—Ñ—ñ–Ω–∏) ‚è∞"
    
    # –ü—ñ–≤–Ω—ñ—á–Ω–∞ –ê–º–µ—Ä–∏–∫–∞
    elif tz_offset == -8 and not na_dst:
        return "UTC-8 (–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å) ‚ùÑÔ∏è"
    elif tz_offset == -7 and na_dst:
        return "UTC-7 (–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å) ‚è∞"
    elif tz_offset == -7 and not na_dst:
        return "UTC-7 (–î–µ–Ω–≤–µ—Ä) ‚ùÑÔ∏è"
    elif tz_offset == -6 and na_dst:
        return "UTC-6 (–î–µ–Ω–≤–µ—Ä) ‚è∞"
    elif tz_offset == -6 and not na_dst:
        return "UTC-6 (–ú–µ—Ö—ñ–∫–æ) ‚ùÑÔ∏è"
    elif tz_offset == -5 and na_dst:
        return "UTC-5 (–ù—å—é-–ô–æ—Ä–∫) ‚è∞"
    elif tz_offset == -5 and not na_dst:
        return "UTC-5 (–ù—å—é-–ô–æ—Ä–∫, –ë–æ–≥–æ—Ç–∞) ‚ùÑÔ∏è"
    
    # –ê–≤—Å—Ç—Ä–∞–ª—ñ—è
    elif tz_offset == 10 and not aus_dst:
        return "UTC+10 (–°—ñ–¥–Ω–µ–π) ‚ùÑÔ∏è"
    elif tz_offset == 11 and aus_dst:
        return "UTC+11 (–°—ñ–¥–Ω–µ–π) ‚è∞"
    elif tz_offset == 12 and not aus_dst:
        return "UTC+12 (–û–∫–ª–µ–Ω–¥) ‚ùÑÔ∏è"
    elif tz_offset == 13 and aus_dst:
        return "UTC+13 (–û–∫–ª–µ–Ω–¥) ‚è∞"
    
    # –Ü–Ω—à—ñ —á–∞—Å–æ–≤—ñ –ø–æ—è—Å–∏ (–±–µ–∑ DST)
    else:
        timezones_static = {
            -12: "UTC-12",
            -11: "UTC-11",
            -10: "UTC-10 (–ì–æ–Ω–æ–ª—É–ª—É)",
            -9: "UTC-9 (–ê–Ω–∫–æ—Ä–∏–¥–∂)",
            -4: "UTC-4 (–ö–∞—Ä–∞–∫–∞—Å)",
            -3: "UTC-3 (–ë—É–µ–Ω–æ—Å-–ê–π—Ä–µ—Å)",
            -2: "UTC-2",
            -1: "UTC-1",
            3: "UTC+3 (–ï—Ä-–†—ñ—è–¥)",
            4: "UTC+4 (–î—É–±–∞–π, –ë–∞–∫—É)",
            5: "UTC+5 (–¢–∞—à–∫–µ–Ω—Ç)",
            6: "UTC+6 (–ê–ª–º–∞—Ç–∏)",
            7: "UTC+7 (–ë–∞–Ω–≥–∫–æ–∫)",
            8: "UTC+8 (–ü–µ–∫—ñ–Ω, –°—ñ–Ω–≥–∞–ø—É—Ä)",
            9: "UTC+9 (–¢–æ–∫—ñ–æ, –°–µ—É–ª)",
            11: "UTC+11",
            14: "UTC+14"
        }
        return timezones_static.get(tz_offset, f"UTC{tz_offset:+d}")

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
def load_meetings():
    global meetings
    # –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ GitHub
    github_data = load_file_from_github(DATA_FILE)
    if github_data is not None:
        meetings = github_data
        return
    
    # –Ø–∫—â–æ GitHub –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –ø—Ä–∞—Ü—é—î–º–æ –∑ –ª–æ–∫–∞–ª—å–Ω–∏–º —Ñ–∞–π–ª–æ–º
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            meetings = json.load(f)

def load_settings():
    global user_settings
    # –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ GitHub
    github_data = load_file_from_github(SETTINGS_FILE)
    if github_data is not None:
        user_settings = github_data
        return
    
    # –Ø–∫—â–æ GitHub –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –ø—Ä–∞—Ü—é—î–º–æ –∑ –ª–æ–∫–∞–ª—å–Ω–∏–º —Ñ–∞–π–ª–æ–º
    if os.path.exists(SETTINGS_FILE):
        with open(SETTINGS_FILE, 'r', encoding='utf-8') as f:
            user_settings = json.load(f)

def load_history():
    global meetings_history
    # –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ GitHub
    github_data = load_file_from_github(HISTORY_FILE)
    if github_data is not None:
        meetings_history = github_data
        return
    
    # –Ø–∫—â–æ GitHub –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –ø—Ä–∞—Ü—é—î–º–æ –∑ –ª–æ–∫–∞–ª—å–Ω–∏–º —Ñ–∞–π–ª–æ–º
    if os.path.exists(HISTORY_FILE):
        try:
            with open(HISTORY_FILE, 'r', encoding='utf-8') as f:
                content = f.read().strip()
                if content:
                    meetings_history = json.loads(content)  
                else:
                    meetings_history = {}
        except json.JSONDecodeError:
            meetings_history = {}
            save_history()
    else:
        meetings_history = {}
# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
def save_meetings():
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(meetings, f, ensure_ascii=False, indent=2)
    save_file_to_github(DATA_FILE)

def save_settings():
    with open(SETTINGS_FILE, 'w', encoding='utf-8') as f:
        json.dump(user_settings, f, ensure_ascii=False, indent=2)
    save_file_to_github(SETTINGS_FILE)

def save_history():
    with open(HISTORY_FILE, 'w', encoding='utf-8') as f:
        json.dump(meetings_history, f, ensure_ascii=False, indent=2)
    save_file_to_github(HISTORY_FILE)

# –û—Ç—Ä–∏–º–∞—Ç–∏ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def get_user_timezone(user_id):
    return user_settings.get(str(user_id), {}).get('timezone', 0)

# –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def get_user_time(user_id):
    tz_offset = get_user_timezone(user_id)
    return datetime.utcnow() + timedelta(hours=tz_offset)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –º–∏–Ω—É–ª–∏—Ö –∑—É—Å—Ç—Ä—ñ—á–µ–π
def clean_old_meetings():
    for user_id in list(meetings.keys()):
        if user_id in meetings:
            user_now = get_user_time(user_id)
            
            if user_id not in meetings_history:
                meetings_history[user_id] = []
            
            for m in meetings[user_id]:
                meeting_time = datetime.strptime(m['datetime'], "%d.%m.%Y %H:%M")
                if meeting_time <= user_now - timedelta(minutes=1):
                    m['auto_completed'] = True
                    meetings_history[user_id].append(m)
            
            save_history()
            
            meetings[user_id] = [
                m for m in meetings[user_id]
                if datetime.strptime(m['datetime'], "%d.%m.%Y %H:%M") > user_now - timedelta(minutes=1)
            ]
            
            if not meetings[user_id]:
                del meetings[user_id]
    save_meetings()

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = str(message.chat.id)
    tz = get_user_timezone(user_id)
    tz_str = get_timezone_string(tz)
    
    welcome_text = f"""
üëã –ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π –±–æ—Ç-–∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –ø—Ä–æ –∑—É—Å—Ç—Ä—ñ—á—ñ.

üìã –©–æ —è –≤–º—ñ—é:
/add - –î–æ–¥–∞—Ç–∏ –∑—É—Å—Ç—Ä—ñ—á (–ø–æ–∫—Ä–æ–∫–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥)
/list - –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∑—É—Å—Ç—Ä—ñ—á—ñ
/listbytag - –§—ñ–ª—å—Ç—Ä –∑—É—Å—Ç—Ä—ñ—á–µ–π –∑–∞ —Ç–µ–≥–∞–º–∏
/edit - –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑—É—Å—Ç—Ä—ñ—á
/delete - –í–∏–¥–∞–ª–∏—Ç–∏ –∑—É—Å—Ç—Ä—ñ—á
/deleteall - –ú–∞—Å–æ–≤–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑—É—Å—Ç—Ä—ñ—á–µ–π
/repeat - –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω—ñ –∑—É—Å—Ç—Ä—ñ—á—ñ
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑—É—Å—Ç—Ä—ñ—á–µ–π
/timezone - –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å
/help - –î–æ–ø–æ–º–æ–≥–∞

üè∑Ô∏è –î–æ—Å—Ç—É–ø–Ω—ñ —Ç–µ–≥–∏:
üíº –†–æ–±–æ—Ç–∞ | üë§ –û—Å–æ–±–∏—Å—Ç–µ | ‚öΩ –°–ø–æ—Ä—Ç | üìö –ù–∞–≤—á–∞–Ω–Ω—è
üè• –ó–¥–æ—Ä–æ–≤'—è | üë®‚Äçüë©‚Äçüëß –°—ñ–º'—è | üõí –ü–æ–∫—É–ø–∫–∏ | ‚≠ê –í–∞–∂–ª–∏–≤–µ

‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–∏—Ö–æ–¥—è—Ç—å:
- –ó–∞ –æ–±—Ä–∞–Ω–∏–π —á–∞—Å (5/10/30/60 —Ö–≤–∏–ª–∏–Ω/1 –¥–µ–Ω—å)
- –†—ñ–≤–Ω–æ —É –≤–∫–∞–∑–∞–Ω–∏–π —á–∞—Å –∑—É—Å—Ç—Ä—ñ—á—ñ

üåç –¢–≤—ñ–π —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å: {tz_str}
üí° –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Ä–∞—Ö–æ–≤—É—î –ª—ñ—Ç–Ω—ñ–π/–∑–∏–º–æ–≤–∏–π —á–∞—Å

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üÜï /updates - –©–æ –Ω–æ–≤–æ–≥–æ –≤ –±–æ—Ç—ñ
"""
    bot.reply_to(message, welcome_text)

@bot.message_handler(commands=['help'])
def help_command(message):
    europe_dst = is_dst_active_europe()
    dst_status = "‚è∞ –ó–∞—Ä–∞–∑ –¥—ñ—î –ª—ñ—Ç–Ω—ñ–π —á–∞—Å –≤ –Ñ–≤—Ä–æ–ø—ñ" if europe_dst else "‚ùÑÔ∏è –ó–∞—Ä–∞–∑ –¥—ñ—î –∑–∏–º–æ–≤–∏–π —á–∞—Å –≤ –Ñ–≤—Ä–æ–ø—ñ"
    
    help_text = f"""
‚ÑπÔ∏è **–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º:**

üìù **–î–æ–¥–∞—Ç–∏ –∑—É—Å—Ç—Ä—ñ—á (–ø–æ–∫—Ä–æ–∫–æ–≤–æ):**
/add - –±–æ—Ç –∑–∞–¥–∞—Å—Ç—å –ø–∏—Ç–∞–Ω–Ω—è –ø–æ –ø–æ—Ä—è–¥–∫—É

üìã **–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑—É—Å—Ç—Ä—ñ—á—ñ:**
/list - –≤—Å—ñ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ –∑—É—Å—Ç—Ä—ñ—á—ñ
/listbytag - —Ñ—ñ–ª—å—Ç—Ä –∑—É—Å—Ç—Ä—ñ—á–µ–π –∑–∞ —Ç–µ–≥–∞–º–∏

‚úèÔ∏è **–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑—É—Å—Ç—Ä—ñ—á:**
/edit - –∑–º—ñ–Ω–∏—Ç–∏ –±—É–¥—å-—è–∫—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑—É—Å—Ç—Ä—ñ—á—ñ 
(–¥–∞—Ç—É, —á–∞—Å, –æ–ø–∏—Å, —Ç–µ–≥, –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è, –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è)

üóë **–í–∏–¥–∞–ª–∏—Ç–∏ –∑—É—Å—Ç—Ä—ñ—á:**
/delete - –≤–∏–¥–∞–ª–∏—Ç–∏ –æ–¥–Ω—É –∑—É—Å—Ç—Ä—ñ—á
/deleteall - –º–∞—Å–æ–≤–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑—É—Å—Ç—Ä—ñ—á–µ–π
(–∑–∞ –¥–∞—Ç–æ—é, —Å–ª–æ–≤–æ–º, —Ç–µ–≥–æ–º, –∑–∞ –ø–µ—Ä—ñ–æ–¥ –∞–±–æ –≤—Å—ñ)

üîÅ **–ü–æ–≤—Ç–æ—Ä—é–≤–∞–Ω—ñ –∑—É—Å—Ç—Ä—ñ—á—ñ:**
/repeat - –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω—ñ/—â–æ—Ç–∏–∂–Ω–µ–≤—ñ/—â–æ–º—ñ—Å—è—á–Ω—ñ

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
/stats - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑—É—Å—Ç—Ä—ñ—á–∞—Ö

üåç **–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å:**
/timezone - –ø—Ä–æ—Å—Ç–∏–π –≤–∏–±—ñ—Ä –∑—ñ —Å–ø–∏—Å–∫—É
–∞–±–æ /timezone (+/-)n
–ü—Ä–∏–∫–ª–∞–¥–∏:
- /timezone +3 (–¥–ª—è UTC+3)
- /timezone -5 (–¥–ª—è UTC-5)

üè∑Ô∏è **–î–æ—Å—Ç—É–ø–Ω—ñ —Ç–µ–≥–∏:**
üíº –†–æ–±–æ—Ç–∞ | üë§ –û—Å–æ–±–∏—Å—Ç–µ | ‚öΩ –°–ø–æ—Ä—Ç | üìö –ù–∞–≤—á–∞–Ω–Ω—è
üè• –ó–¥–æ—Ä–æ–≤'—è | üë®‚Äçüë©‚Äçüëß –°—ñ–º'—è | üõí –ü–æ–∫—É–ø–∫–∏ | ‚≠ê –í–∞–∂–ª–∏–≤–µ

‚ÑπÔ∏è {dst_status}
üí° –ß–∞—Å–æ–≤—ñ –ø–æ—è—Å–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å–µ–∑–æ–Ω—É
‚è∞ = –ª—ñ—Ç–Ω—ñ–π —á–∞—Å | ‚ùÑÔ∏è = –∑–∏–º–æ–≤–∏–π —á–∞—Å

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üÜï /updates - –î–∏–≤–∏—Å—å –æ—Å—Ç–∞–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–æ—Ç–∞!
"""
    bot.reply_to(message, help_text, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /timezone
@bot.message_handler(commands=['timezone'])
def timezone_command(message):
    user_id = str(message.chat.id)
    
    try:
        parts = message.text.split()
        
        if len(parts) == 1:
            current_tz = get_user_timezone(user_id)
            tz_str = get_timezone_string(current_tz)
            
            europe_dst = is_dst_active_europe()
            na_dst = is_dst_active_north_america()
            aus_dst = is_dst_active_australia()
            
            dst_info = "\n\nüìç –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω:\n"
            dst_info += f"‚Ä¢ –Ñ–≤—Ä–æ–ø–∞: {'‚è∞ –ª—ñ—Ç–Ω—ñ–π —á–∞—Å' if europe_dst else '‚ùÑÔ∏è –∑–∏–º–æ–≤–∏–π —á–∞—Å'}\n"
            dst_info += f"‚Ä¢ –ü—ñ–≤–Ω—ñ—á–Ω–∞ –ê–º–µ—Ä–∏–∫–∞: {'‚è∞ –ª—ñ—Ç–Ω—ñ–π —á–∞—Å' if na_dst else '‚ùÑÔ∏è –∑–∏–º–æ–≤–∏–π —á–∞—Å'}\n"
            dst_info += f"‚Ä¢ –ê–≤—Å—Ç—Ä–∞–ª—ñ—è: {'‚è∞ –ª—ñ—Ç–Ω—ñ–π —á–∞—Å' if aus_dst else '‚ùÑÔ∏è –∑–∏–º–æ–≤–∏–π —á–∞—Å'}"
            
            markup = types.InlineKeyboardMarkup(row_width=2)
            popular_timezones = get_popular_timezones()
            
            buttons = [types.InlineKeyboardButton(label, callback_data=f'tz_{offset}') for offset, label in popular_timezones]
            for i in range(0, len(buttons), 2):
                if i+1 < len(buttons):
                    markup.add(buttons[i], buttons[i+1])
                else:
                    markup.add(buttons[i])
            
            bot.reply_to(message, f"üåç –¢–≤—ñ–π –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å: {tz_str}{dst_info}\n\n–û–±–µ—Ä–∏ –Ω–æ–≤–∏–π —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å:", reply_markup=markup)
            return
        
        tz_value = int(parts[1])
        
        if tz_value < -12 or tz_value > 14:
            bot.reply_to(message, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å! –î–æ–ø—É—Å—Ç–∏–º—ñ –∑–Ω–∞—á–µ–Ω–Ω—è: –≤—ñ–¥ -12 –¥–æ +14\n\n–ü—Ä–∏–∫–ª–∞–¥:\n/timezone +3")
            return
        
        if user_id not in user_settings:
            user_settings[user_id] = {}
        
        user_settings[user_id]['timezone'] = tz_value
        save_settings()
        
        tz_str = get_timezone_string(tz_value)
        user_time = get_user_time(user_id).strftime('%H:%M')
        
        bot.reply_to(message, f"‚úÖ –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {tz_str}\n\nüïê –¢–≤—ñ–π –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å: {user_time}")
        
    except (ValueError, IndexError):
        bot.reply_to(message, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π:\n/timezone +3 (–¥–ª—è UTC+3)\n/timezone -5 (–¥–ª—è UTC-5)\n/timezone 0 (–¥–ª—è UTC)")

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('tz_'))
def callback_timezone(call):
    user_id = str(call.message.chat.id)
    tz_value = int(call.data.replace('tz_', ''))
    
    if user_id not in user_settings:
        user_settings[user_id] = {}
    
    user_settings[user_id]['timezone'] = tz_value
    save_settings()
    
    tz_str = get_timezone_string(tz_value)
    user_time = get_user_time(user_id).strftime('%H:%M')
    
    bot.answer_callback_query(call.id, f"‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    bot.edit_message_text(
        f"‚úÖ –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {tz_str}\n\nüïê –¢–≤—ñ–π –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å: {user_time}",
        call.message.chat.id,
        call.message.message_id
    )

# –ö–æ–º–∞–Ω–¥–∞ /add
@bot.message_handler(commands=['add'])
def add_meeting_start(message):
    user_id = str(message.chat.id)
    
    if user_id not in user_settings or 'timezone' not in user_settings[user_id]:
        user_states[user_id] = {'step': 'awaiting_timezone', 'next_command': 'add'}
        
        markup = types.InlineKeyboardMarkup(row_width=2)
        popular_timezones = get_popular_timezones()
        
        buttons = [types.InlineKeyboardButton(label, callback_data=f'tzadd_{offset}') for offset, label in popular_timezones]
        for i in range(0, len(buttons), 2):
            if i+1 < len(buttons):
                markup.add(buttons[i], buttons[i+1])
            else:
                markup.add(buttons[i])
        
        bot.send_message(message.chat.id, "üåç –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä–∏ —Å–≤—ñ–π —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å:", reply_markup=markup)
        return
    
    user_states[user_id] = {'step': 'date'}
    
    markup = types.InlineKeyboardMarkup()
    today_btn = types.InlineKeyboardButton('üìÖ –°—å–æ–≥–æ–¥–Ω—ñ', callback_data='date_today')
    tomorrow_btn = types.InlineKeyboardButton('üìÖ –ó–∞–≤—Ç—Ä–∞', callback_data='date_tomorrow')
    other_btn = types.InlineKeyboardButton('üìÖ –Ü–Ω—à–∞ –¥–∞—Ç–∞', callback_data='date_other')
    markup.add(today_btn, tomorrow_btn)
    markup.add(other_btn)
    
    tz = get_user_timezone(user_id)
    tz_str = get_timezone_string(tz)
    
    bot.send_message(message.chat.id, f"üìÖ –û–±–µ—Ä–∏ –¥–∞—Ç—É –∑—É—Å—Ç—Ä—ñ—á—ñ:\n\nüåç –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å: {tz_str}", reply_markup=markup)

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å—É –ø–µ—Ä–µ–¥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º –∑—É—Å—Ç—Ä—ñ—á—ñ
@bot.callback_query_handler(func=lambda call: call.data.startswith('tzadd_'))
def callback_timezone_before_add(call):
    user_id = str(call.message.chat.id)
    tz_value = int(call.data.replace('tzadd_', ''))
    
    if user_id not in user_settings:
        user_settings[user_id] = {}
    
    user_settings[user_id]['timezone'] = tz_value
    save_settings()
    
    tz_str = get_timezone_string(tz_value)
    
    bot.answer_callback_query(call.id, f"‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    user_states[user_id] = {'step': 'date'}
    
    markup = types.InlineKeyboardMarkup()
    today_btn = types.InlineKeyboardButton('üìÖ –°—å–æ–≥–æ–¥–Ω—ñ', callback_data='date_today')
    tomorrow_btn = types.InlineKeyboardButton('üìÖ –ó–∞–≤—Ç—Ä–∞', callback_data='date_tomorrow')
    other_btn = types.InlineKeyboardButton('üìÖ –Ü–Ω—à–∞ –¥–∞—Ç–∞', callback_data='date_other')
    markup.add(today_btn, tomorrow_btn)
    markup.add(other_btn)
    
    bot.edit_message_text(
        f"‚úÖ –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {tz_str}\n\nüìÖ –û–±–µ—Ä–∏ –¥–∞—Ç—É –∑—É—Å—Ç—Ä—ñ—á—ñ:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('date_'))
def callback_date(call):
    user_id = str(call.message.chat.id)
    
    if call.data == 'date_today':
        selected_date = get_user_time(user_id)
        user_states[user_id]['date'] = selected_date.strftime('%d.%m.%Y')
        user_states[user_id]['step'] = 'time'
        bot.answer_callback_query(call.id, "‚úÖ –°—å–æ–≥–æ–¥–Ω—ñ")
        show_time_selection(call.message.chat.id, call.message.message_id, user_states[user_id]['date'])
        
    elif call.data == 'date_tomorrow':
        selected_date = get_user_time(user_id) + timedelta(days=1)
        user_states[user_id]['date'] = selected_date.strftime('%d.%m.%Y')
        user_states[user_id]['step'] = 'time'
        bot.answer_callback_query(call.id, "‚úÖ –ó–∞–≤—Ç—Ä–∞")
        show_time_selection(call.message.chat.id, call.message.message_id, user_states[user_id]['date'])
        
    elif call.data == 'date_other':
        bot.answer_callback_query(call.id)
        bot.edit_message_text("üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†\n\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 20.10.2025", 
                             call.message.chat.id, call.message.message_id)
        user_states[user_id]['step'] = 'custom_date'

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É inline-–∫–Ω–æ–ø–æ–∫ –≤–∏–±–æ—Ä—É —á–∞—Å—É
def show_time_selection(chat_id, message_id, date_str):
    markup = types.InlineKeyboardMarkup(row_width=3)
    times = ['09:00', '10:00', '11:00', '12:00', '14:00', '15:00', '16:00', '17:00', '18:00']
    buttons = [types.InlineKeyboardButton(t, callback_data=f'time_{t}') for t in times]
    
    for i in range(0, len(buttons), 3):
        markup.add(*buttons[i:i+3])
    
    markup.add(types.InlineKeyboardButton('üïê –Ü–Ω—à–∏–π —á–∞—Å', callback_data='time_other'))
    
    bot.edit_message_text(f"üïê –û–±–µ—Ä–∏ —á–∞—Å –∑—É—Å—Ç—Ä—ñ—á—ñ\n(–î–∞—Ç–∞: {date_str}):", 
                         chat_id, message_id, reply_markup=markup)

# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ—ó –¥–∞—Ç–∏
@bot.message_handler(func=lambda message: str(message.chat.id) in user_states and user_states[str(message.chat.id)].get('step') == 'custom_date')
def process_custom_date(message):
    user_id = str(message.chat.id)
    
    try:
        date_obj = datetime.strptime(message.text, '%d.%m.%Y')
        user_now = get_user_time(user_id)
        
        if date_obj.date() < user_now.date():
            bot.send_message(message.chat.id, "‚ùå –ù–µ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑—É—Å—Ç—Ä—ñ—á —É –º–∏–Ω—É–ª–æ–º—É! –í–≤–µ–¥–∏ —ñ–Ω—à—É –¥–∞—Ç—É:")
            return
        
        user_states[user_id]['date'] = message.text
        user_states[user_id]['step'] = 'time'
        
        markup = types.InlineKeyboardMarkup(row_width=3)
        times = ['09:00', '10:00', '11:00', '12:00', '14:00', '15:00', '16:00', '17:00', '18:00']
        buttons = [types.InlineKeyboardButton(t, callback_data=f'time_{t}') for t in times]
        
        for i in range(0, len(buttons), 3):
            markup.add(*buttons[i:i+3])
        
        markup.add(types.InlineKeyboardButton('üïê –Ü–Ω—à–∏–π —á–∞—Å', callback_data='time_other'))
        
        bot.send_message(message.chat.id, f"üïê –û–±–µ—Ä–∏ —á–∞—Å –∑—É—Å—Ç—Ä—ñ—á—ñ\n(–î–∞—Ç–∞: {user_states[user_id]['date']}):", reply_markup=markup)
        
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏!\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–†–†–†–†\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 20.10.2025")

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —á–∞—Å—É —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('time_'))
def callback_time(call):
    user_id = str(call.message.chat.id)
    
    if call.data == 'time_other':
        bot.answer_callback_query(call.id)
        bot.edit_message_text("üïê –í–≤–µ–¥–∏ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–•\n\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 14:30", 
                             call.message.chat.id, call.message.message_id)
        user_states[user_id]['step'] = 'custom_time'
    else:
        time_str = call.data.replace('time_', '')
        user_states[user_id]['time'] = time_str
        user_states[user_id]['step'] = 'description'
        bot.answer_callback_query(call.id, f"‚úÖ {time_str}")
        
        bot.edit_message_text(
            f"üìù –û–ø–∏—à–∏ –∑—É—Å—Ç—Ä—ñ—á\n\n–î–∞—Ç–∞: {user_states[user_id]['date']}\n–ß–∞—Å: {user_states[user_id]['time']}\n\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ó—É—Å—Ç—Ä—ñ—á –∑ –∫–ª—ñ—î–Ω—Ç–æ–º",
            call.message.chat.id, call.message.message_id
        )

# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —á–∞—Å—É
@bot.message_handler(func=lambda message: str(message.chat.id) in user_states and user_states[str(message.chat.id)].get('step') == 'custom_time')
def process_custom_time(message):
    user_id = str(message.chat.id)
    
    try:
        time_obj = datetime.strptime(message.text, '%H:%M')
        user_states[user_id]['time'] = message.text
        user_states[user_id]['step'] = 'description'
        
        bot.send_message(message.chat.id, f"üìù –û–ø–∏—à–∏ –∑—É—Å—Ç—Ä—ñ—á\n\n–î–∞—Ç–∞: {user_states[user_id]['date']}\n–ß–∞—Å: {user_states[user_id]['time']}\n\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ó—É—Å—Ç—Ä—ñ—á –∑ –∫–ª—ñ—î–Ω—Ç–æ–º")
        
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É!\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ñ–æ—Ä–º–∞—Ç: –ì–ì:–•–•\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 14:30")

# –û–±—Ä–æ–±–∫–∞ –æ–ø–∏—Å—É –∑—É—Å—Ç—Ä—ñ—á—ñ
@bot.message_handler(func=lambda message: str(message.chat.id) in user_states and user_states[str(message.chat.id)].get('step') == 'description')
def process_description(message):
    user_id = str(message.chat.id)
    
    user_states[user_id]['description'] = message.text
    user_states[user_id]['step'] = 'tag'
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤–∏–±–æ—Ä—É —Ç–µ–≥—É
    markup = types.InlineKeyboardMarkup(row_width=2)
    tag_buttons = [
        types.InlineKeyboardButton(f"{emoji} {tag.capitalize()}", callback_data=f'tag_{tag}')
        for tag, emoji in TAGS.items()
    ]
    
    for i in range(0, len(tag_buttons), 2):
        markup.add(*tag_buttons[i:i+2])
    
    markup.add(types.InlineKeyboardButton('‚û°Ô∏è –ë–µ–∑ —Ç–µ–≥—É', callback_data='tag_none'))
    
    bot.send_message(
        message.chat.id,
        f"üè∑Ô∏è –û–±–µ—Ä–∏ —Ç–µ–≥ –¥–ª—è –∑—É—Å—Ç—Ä—ñ—á—ñ:\n\nüìù {message.text}",
        reply_markup=markup
    )

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–µ–≥—É
@bot.callback_query_handler(func=lambda call: call.data.startswith('tag_'))
def callback_tag(call):
    user_id = str(call.message.chat.id)
    tag = call.data.replace('tag_', '')
    
    if tag == 'none':
        user_states[user_id]['tag'] = None
        tag_emoji = ''
    else:
        user_states[user_id]['tag'] = tag
        tag_emoji = TAGS.get(tag, '')
    
    user_states[user_id]['step'] = 'reminder'
    user_states[user_id]['selected_reminders'] = []  # –ù–æ–≤–æ–µ: —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤–∏–±–æ—Ä—É —á–∞—Å—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton('‚è∞ 1 –¥–µ–Ω—å', callback_data='remind_1440'),
        types.InlineKeyboardButton('‚è∞ 1 –≥–æ–¥–∏–Ω–∞', callback_data='remind_60')
    )
    markup.add(
        types.InlineKeyboardButton('‚è∞ 30 —Ö–≤–∏–ª–∏–Ω', callback_data='remind_30'),
        types.InlineKeyboardButton('‚è∞ 10 —Ö–≤–∏–ª–∏–Ω', callback_data='remind_10')
    )
    markup.add(
        types.InlineKeyboardButton('‚è∞ 5 —Ö–≤–∏–ª–∏–Ω', callback_data='remind_5')
    )
    markup.add(
        types.InlineKeyboardButton('‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data='remind_done')
    )
    
    tag_text = f"\nüè∑Ô∏è {tag_emoji} {tag.capitalize()}" if tag != 'none' else ""
    bot.answer_callback_query(call.id, f"‚úÖ {tag_emoji} {tag.capitalize() if tag != 'none' else '–ë–µ–∑ —Ç–µ–≥—É'}")
    bot.edit_message_text(
        f"‚è∞ –û–±–µ—Ä–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (–º–æ–∂–Ω–∞ –∫—ñ–ª—å–∫–∞):\n\nüìÖ {user_states[user_id]['date']}\nüïê {user_states[user_id]['time']}\nüìù {user_states[user_id]['description']}{tag_text}\n\n–û–±—Ä–∞–Ω–æ: –Ω–µ–º–∞—î",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —á–∞—Å—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
@bot.callback_query_handler(func=lambda call: call.data.startswith('remind_'))
def callback_reminder(call):
    user_id = str(call.message.chat.id)
    
    try:
        if call.data == 'remind_done':
            # –ó–∞–≤–µ—Ä—à—É—î–º–æ –≤–∏–±—ñ—Ä –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
            if not user_states[user_id].get('selected_reminders'):
                bot.answer_callback_query(call.id, "‚ùå –û–±–µ—Ä–∏ —Ö–æ—á–∞ –± –æ–¥–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è!")
                return
            
            date_str = user_states[user_id]['date']
            time_str = user_states[user_id]['time']
            description = user_states[user_id]['description']
            
            datetime_str = f"{date_str} {time_str}"
            meeting_datetime = datetime.strptime(datetime_str, "%d.%m.%Y %H:%M")
            user_now = get_user_time(user_id)
            
            if meeting_datetime <= user_now:
                bot.answer_callback_query(call.id, "‚ùå –ù–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∑—É—Å—Ç—Ä—ñ—á —É –º–∏–Ω—É–ª–æ–º—É!")
                bot.edit_message_text("‚ùå –ù–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∑—É—Å—Ç—Ä—ñ—á —É –º–∏–Ω—É–ª–æ–º—É!", call.message.chat.id, call.message.message_id)
                del user_states[user_id]
                return
            
            if user_id not in meetings:
                meetings[user_id] = []
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            notifications_status = {}
            for reminder_min in user_states[user_id]['selected_reminders']:
                notifications_status[str(reminder_min)] = False
            
            meeting = {
                "datetime": datetime_str,
                "description": description,
                "notified_before": False,
                "notified_now": False,
                "reminder_minutes": user_states[user_id]['selected_reminders'],  # –°–ø–∏—Å–æ–∫ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
                "notifications_sent": notifications_status,  # –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ–∂–Ω–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
                "repeat": "none",
                "completed": False,
                "tag": user_states[user_id].get('tag')
            }
            
            meetings[user_id].append(meeting)
            save_meetings()
            
            tz = get_user_timezone(user_id)
            tz_str = get_timezone_string(tz)
            
            tag = user_states[user_id].get('tag')
            tag_text = f"\nüè∑Ô∏è {TAGS.get(tag, '')} {tag.capitalize()}" if tag else ""
            
            # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ –æ–±—Ä–∞–Ω–∏–º–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è–º–∏
            reminders_list = []
            for min_val in sorted(user_states[user_id]['selected_reminders'], reverse=True):
                if min_val >= 1440:
                    reminders_list.append(f"{min_val // 1440} –¥–µ–Ω—å")
                elif min_val >= 60:
                    reminders_list.append(f"{min_val // 60} –≥–æ–¥–∏–Ω–∞")
                else:
                    reminders_list.append(f"{min_val} —Ö–≤–∏–ª–∏–Ω")
            
            reminders_text = ", ".join(reminders_list)
            
            bot.answer_callback_query(call.id, "‚úÖ –ó—É—Å—Ç—Ä—ñ—á –¥–æ–¥–∞–Ω–æ!")
            bot.edit_message_text(
                f"‚úÖ –ó—É—Å—Ç—Ä—ñ—á –¥–æ–¥–∞–Ω–æ!\n\nüìÖ {date_str}\nüïê {time_str}\nüìù {description}{tag_text}\nüåç {tz_str}\n\n‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {reminders_text}",
                call.message.chat.id, 
                call.message.message_id
            )
            
            del user_states[user_id]
        
        else:
            # –î–æ–¥–∞—î–º–æ/–ø—Ä–∏–±–∏—Ä–∞—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É
            reminder_minutes = int(call.data.replace('remind_', ''))
            
            if 'selected_reminders' not in user_states[user_id]:
                user_states[user_id]['selected_reminders'] = []
            
            if reminder_minutes in user_states[user_id]['selected_reminders']:
                # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
                user_states[user_id]['selected_reminders'].remove(reminder_minutes)
                bot.answer_callback_query(call.id, "‚ùå –ü—Ä–∏–±—Ä–∞–Ω–æ")
            else:
                # –î–æ–¥–∞—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
                user_states[user_id]['selected_reminders'].append(reminder_minutes)
                bot.answer_callback_query(call.id, "‚úÖ –î–æ–¥–∞–Ω–æ")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑ –ø–æ–∑–Ω–∞—á–∫–∞–º–∏ –æ–±—Ä–∞–Ω–∏—Ö
            markup = types.InlineKeyboardMarkup()
            
            reminders_options = [
                (1440, '‚è∞ 1 –¥–µ–Ω—å'),
                (60, '‚è∞ 1 –≥–æ–¥–∏–Ω–∞'),
                (30, '‚è∞ 30 —Ö–≤–∏–ª–∏–Ω'),
                (10, '‚è∞ 10 —Ö–≤–∏–ª–∏–Ω'),
                (5, '‚è∞ 5 —Ö–≤–∏–ª–∏–Ω')
            ]
            
            for min_val, label in reminders_options:
                if min_val in user_states[user_id]['selected_reminders']:
                    label = f"‚úÖ {label}"
                
                if min_val >= 60:
                    markup.add(types.InlineKeyboardButton(label, callback_data=f'remind_{min_val}'))
                else:
                    if min_val == 30:
                        markup.row(
                            types.InlineKeyboardButton(label, callback_data=f'remind_{min_val}'),
                            types.InlineKeyboardButton('‚è∞ 10 —Ö–≤–∏–ª–∏–Ω' if 10 not in user_states[user_id]['selected_reminders'] else '‚úÖ ‚è∞ 10 —Ö–≤–∏–ª–∏–Ω', callback_data='remind_10')
                        )
                    elif min_val == 10:
                        continue
                    else:
                        markup.add(types.InlineKeyboardButton(label, callback_data=f'remind_{min_val}'))
            
            markup.add(types.InlineKeyboardButton('‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data='remind_done'))
            
            # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            if user_states[user_id]['selected_reminders']:
                selected_list = []
                for min_val in sorted(user_states[user_id]['selected_reminders'], reverse=True):
                    if min_val >= 1440:
                        selected_list.append(f"{min_val // 1440} –¥–µ–Ω—å")
                    elif min_val >= 60:
                        selected_list.append(f"{min_val // 60} –≥–æ–¥")
                    else:
                        selected_list.append(f"{min_val} —Ö–≤")
                selected_text = ", ".join(selected_list)
            else:
                selected_text = "–Ω–µ–º–∞—î"
            
            tag = user_states[user_id].get('tag')
            tag_emoji = TAGS.get(tag, '') if tag else ''
            tag_text = f"\nüè∑Ô∏è {tag_emoji} {tag.capitalize()}" if tag else ""
            
            bot.edit_message_text(
                f"‚è∞ –û–±–µ—Ä–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (–º–æ–∂–Ω–∞ –∫—ñ–ª—å–∫–∞):\n\nüìÖ {user_states[user_id]['date']}\nüïê {user_states[user_id]['time']}\nüìù {user_states[user_id]['description']}{tag_text}\n\n–û–±—Ä–∞–Ω–æ: {selected_text}",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
        
    except Exception as e:
        bot.answer_callback_query(call.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞")
        bot.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}", call.message.chat.id, call.message.message_id)
        if user_id in user_states:
            del user_states[user_id]

# –ö–æ–º–∞–Ω–¥–∞ /quickadd (–æ–Ω–æ–≤–ª–µ–Ω–∞ - —Ç–µ–ø–µ—Ä —è–∫ –ø–æ–∫—Ä–æ–∫–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥)
@bot.message_handler(commands=['quickadd'])
def quick_add_meeting(message):
    user_id = str(message.chat.id)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å
    if user_id not in user_settings or 'timezone' not in user_settings[user_id]:
        user_states[user_id] = {
            'step': 'awaiting_timezone',
            'next_command': 'quickadd'
        }
        
        markup = types.InlineKeyboardMarkup(row_width=2)
        popular_timezones = get_popular_timezones()
        
        buttons = [types.InlineKeyboardButton(label, callback_data=f'tzquick_{offset}') for offset, label in popular_timezones]
        for i in range(0, len(buttons), 2):
            if i+1 < len(buttons):
                markup.add(buttons[i], buttons[i+1])
            else:
                markup.add(buttons[i])
        
        bot.reply_to(message, "üåç –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä–∏ —Å–≤—ñ–π —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å:", reply_markup=markup)
        return
    
    # –ü–æ—á–∞—Ç–æ–∫ —à–≤–∏–¥–∫–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è
    user_states[user_id] = {'step': 'quickadd_date', 'mode': 'quickadd'}
    
    markup = types.InlineKeyboardMarkup()
    today_btn = types.InlineKeyboardButton('üìÖ –°—å–æ–≥–æ–¥–Ω—ñ', callback_data='quickdate_today')
    tomorrow_btn = types.InlineKeyboardButton('üìÖ –ó–∞–≤—Ç—Ä–∞', callback_data='quickdate_tomorrow')
    other_btn = types.InlineKeyboardButton('üìÖ –Ü–Ω—à–∞ –¥–∞—Ç–∞', callback_data='quickdate_other')
    markup.add(today_btn, tomorrow_btn)
    markup.add(other_btn)
    
    tz = get_user_timezone(user_id)
    tz_str = get_timezone_string(tz)
    
    bot.reply_to(message, f"‚ö°Ô∏è –®–≤–∏–¥–∫–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑—É—Å—Ç—Ä—ñ—á—ñ\n\nüìÖ –û–±–µ—Ä–∏ –¥–∞—Ç—É:\n\nüåç –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å: {tz_str}", reply_markup=markup)

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å—É –ø–µ—Ä–µ–¥ quickadd
@bot.callback_query_handler(func=lambda call: call.data.startswith('tzquick_'))
def callback_timezone_before_quickadd(call):
    user_id = str(call.message.chat.id)
    tz_value = int(call.data.replace('tzquick_', ''))
    
    if user_id not in user_settings:
        user_settings[user_id] = {}
    
    user_settings[user_id]['timezone'] = tz_value
    save_settings()
    
    tz_str = get_timezone_string(tz_value)
    
    bot.answer_callback_query(call.id, f"‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    # –ü–æ—á–∞—Ç–æ–∫ —à–≤–∏–¥–∫–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è
    user_states[user_id] = {'step': 'quickadd_date', 'mode': 'quickadd'}
    
    markup = types.InlineKeyboardMarkup()
    today_btn = types.InlineKeyboardButton('üìÖ –°—å–æ–≥–æ–¥–Ω—ñ', callback_data='quickdate_today')
    tomorrow_btn = types.InlineKeyboardButton('üìÖ –ó–∞–≤—Ç—Ä–∞', callback_data='quickdate_tomorrow')
    other_btn = types.InlineKeyboardButton('üìÖ –Ü–Ω—à–∞ –¥–∞—Ç–∞', callback_data='quickdate_other')
    markup.add(today_btn, tomorrow_btn)
    markup.add(other_btn)
    
    bot.edit_message_text(
        f"‚úÖ –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {tz_str}\n\n‚ö°Ô∏è –®–≤–∏–¥–∫–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑—É—Å—Ç—Ä—ñ—á—ñ\n\nüìÖ –û–±–µ—Ä–∏ –¥–∞—Ç—É:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏ –¥–ª—è quickadd
@bot.callback_query_handler(func=lambda call: call.data.startswith('quickdate_'))
def callback_quickdate(call):
    user_id = str(call.message.chat.id)
    
    if call.data == 'quickdate_today':
        selected_date = get_user_time(user_id)
        user_states[user_id]['date'] = selected_date.strftime('%d.%m.%Y')
        user_states[user_id]['step'] = 'quickadd_time'
        bot.answer_callback_query(call.id, "‚úÖ –°—å–æ–≥–æ–¥–Ω—ñ")
        show_quickadd_time_selection(call.message.chat.id, call.message.message_id, user_states[user_id]['date'])
        
    elif call.data == 'quickdate_tomorrow':
        selected_date = get_user_time(user_id) + timedelta(days=1)
        user_states[user_id]['date'] = selected_date.strftime('%d.%m.%Y')
        user_states[user_id]['step'] = 'quickadd_time'
        bot.answer_callback_query(call.id, "‚úÖ –ó–∞–≤—Ç—Ä–∞")
        show_quickadd_time_selection(call.message.chat.id, call.message.message_id, user_states[user_id]['date'])
        
    elif call.data == 'quickdate_other':
        bot.answer_callback_query(call.id)
        bot.edit_message_text("üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†\n\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 20.10.2025", 
                             call.message.chat.id, call.message.message_id)
        user_states[user_id]['step'] = 'quickadd_custom_date'

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –≤–∏–±–æ—Ä—É —á–∞—Å—É –≤ quickadd
def show_quickadd_time_selection(chat_id, message_id, date_str):
    markup = types.InlineKeyboardMarkup(row_width=3)
    times = ['09:00', '10:00', '11:00', '12:00', '14:00', '15:00', '16:00', '17:00', '18:00']
    buttons = [types.InlineKeyboardButton(t, callback_data=f'quicktime_{t}') for t in times]
    
    for i in range(0, len(buttons), 3):
        markup.add(*buttons[i:i+3])
    
    markup.add(types.InlineKeyboardButton('üïê –Ü–Ω—à–∏–π —á–∞—Å', callback_data='quicktime_other'))
    
    bot.edit_message_text(f"‚ö°Ô∏è –®–≤–∏–¥–∫–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è\n\nüïê –û–±–µ—Ä–∏ —á–∞—Å –∑—É—Å—Ç—Ä—ñ—á—ñ\n(–î–∞—Ç–∞: {date_str}):", 
                         chat_id, message_id, reply_markup=markup)

# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ—ó –¥–∞—Ç–∏ –¥–ª—è quickadd
@bot.message_handler(func=lambda message: str(message.chat.id) in user_states and user_states[str(message.chat.id)].get('step') == 'quickadd_custom_date')
def process_quickadd_custom_date(message):
    user_id = str(message.chat.id)
    
    try:
        date_obj = datetime.strptime(message.text, '%d.%m.%Y')
        user_now = get_user_time(user_id)
        
        if date_obj.date() < user_now.date():
            bot.send_message(message.chat.id, "‚ùå –ù–µ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑—É—Å—Ç—Ä—ñ—á —É –º–∏–Ω—É–ª–æ–º—É! –í–≤–µ–¥–∏ —ñ–Ω—à—É –¥–∞—Ç—É:")
            return
        
        user_states[user_id]['date'] = message.text
        user_states[user_id]['step'] = 'quickadd_time'
        
        markup = types.InlineKeyboardMarkup(row_width=3)
        times = ['09:00', '10:00', '11:00', '12:00', '14:00', '15:00', '16:00', '17:00', '18:00']
        buttons = [types.InlineKeyboardButton(t, callback_data=f'quicktime_{t}') for t in times]
        
        for i in range(0, len(buttons), 3):
            markup.add(*buttons[i:i+3])
        
        markup.add(types.InlineKeyboardButton('üïê –Ü–Ω—à–∏–π —á–∞—Å', callback_data='quicktime_other'))
        
        bot.send_message(message.chat.id, f"‚ö°Ô∏è –®–≤–∏–¥–∫–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è\n\nüïê –û–±–µ—Ä–∏ —á–∞—Å –∑—É—Å—Ç—Ä—ñ—á—ñ\n(–î–∞—Ç–∞: {user_states[user_id]['date']}):", reply_markup=markup)
        
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏!\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–†–†–†–†\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 20.10.2025")

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —á–∞—Å—É –¥–ª—è quickadd
@bot.callback_query_handler(func=lambda call: call.data.startswith('quicktime_'))
def callback_quicktime(call):
    user_id = str(call.message.chat.id)
    
    if call.data == 'quicktime_other':
        bot.answer_callback_query(call.id)
        bot.edit_message_text("üïê –í–≤–µ–¥–∏ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–•\n\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 14:30", 
                             call.message.chat.id, call.message.message_id)
        user_states[user_id]['step'] = 'quickadd_custom_time'
    else:
        time_str = call.data.replace('quicktime_', '')
        user_states[user_id]['time'] = time_str
        user_states[user_id]['step'] = 'quickadd_description'
        bot.answer_callback_query(call.id, f"‚úÖ {time_str}")
        
        bot.edit_message_text(
            f"‚ö°Ô∏è –®–≤–∏–¥–∫–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è\n\nüìù –û–ø–∏—à–∏ –∑—É—Å—Ç—Ä—ñ—á\n\n–î–∞—Ç–∞: {user_states[user_id]['date']}\n–ß–∞—Å: {user_states[user_id]['time']}\n\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ó—É—Å—Ç—Ä—ñ—á –∑ –∫–ª—ñ—î–Ω—Ç–æ–º",
            call.message.chat.id, call.message.message_id
        )

# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —á–∞—Å—É –¥–ª—è quickadd
@bot.message_handler(func=lambda message: str(message.chat.id) in user_states and user_states[str(message.chat.id)].get('step') == 'quickadd_custom_time')
def process_quickadd_custom_time(message):
    user_id = str(message.chat.id)
    
    try:
        time_obj = datetime.strptime(message.text, '%H:%M')
        user_states[user_id]['time'] = message.text
        user_states[user_id]['step'] = 'quickadd_description'
        
        bot.send_message(message.chat.id, f"‚ö°Ô∏è –®–≤–∏–¥–∫–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è\n\nüìù –û–ø–∏—à–∏ –∑—É—Å—Ç—Ä—ñ—á\n\n–î–∞—Ç–∞: {user_states[user_id]['date']}\n–ß–∞—Å: {user_states[user_id]['time']}\n\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ó—É—Å—Ç—Ä—ñ—á –∑ –∫–ª—ñ—î–Ω—Ç–æ–º")
        
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É!\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ñ–æ—Ä–º–∞—Ç: –ì–ì:–•–•\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 14:30")

# –û–±—Ä–æ–±–∫–∞ –æ–ø–∏—Å—É –¥–ª—è quickadd
@bot.message_handler(func=lambda message: str(message.chat.id) in user_states and user_states[str(message.chat.id)].get('step') == 'quickadd_description')
def process_quickadd_description(message):
    user_id = str(message.chat.id)
    
    user_states[user_id]['description'] = message.text
    user_states[user_id]['step'] = 'quickadd_tag'
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤–∏–±–æ—Ä—É —Ç–µ–≥—É
    markup = types.InlineKeyboardMarkup(row_width=2)
    tag_buttons = [
        types.InlineKeyboardButton(f"{emoji} {tag.capitalize()}", callback_data=f'quicktag_{tag}')
        for tag, emoji in TAGS.items()
    ]
    
    for i in range(0, len(tag_buttons), 2):
        markup.add(*tag_buttons[i:i+2])
    
    markup.add(types.InlineKeyboardButton('‚û°Ô∏è –ë–µ–∑ —Ç–µ–≥—É', callback_data='quicktag_none'))
    
    bot.send_message(
        message.chat.id,
        f"‚ö°Ô∏è –®–≤–∏–¥–∫–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è\n\nüè∑Ô∏è –û–±–µ—Ä–∏ —Ç–µ–≥ –¥–ª—è –∑—É—Å—Ç—Ä—ñ—á—ñ:\n\nüìù {message.text}",
        reply_markup=markup
    )

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–µ–≥—É –¥–ª—è quickadd
@bot.callback_query_handler(func=lambda call: call.data.startswith('quicktag_'))
def callback_quicktag(call):
    user_id = str(call.message.chat.id)
    tag = call.data.replace('quicktag_', '')
    
    if tag == 'none':
        user_states[user_id]['tag'] = None
        tag_emoji = ''
    else:
        user_states[user_id]['tag'] = tag
        tag_emoji = TAGS.get(tag, '')
    
    user_states[user_id]['step'] = 'quickadd_reminder'
    user_states[user_id]['selected_reminders'] = []
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤–∏–±–æ—Ä—É —á–∞—Å—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton('‚è∞ 1 –¥–µ–Ω—å', callback_data='quickremind_1440'),
        types.InlineKeyboardButton('‚è∞ 1 –≥–æ–¥–∏–Ω–∞', callback_data='quickremind_60')
    )
    markup.add(
        types.InlineKeyboardButton('‚è∞ 30 —Ö–≤–∏–ª–∏–Ω', callback_data='quickremind_30'),
        types.InlineKeyboardButton('‚è∞ 10 —Ö–≤–∏–ª–∏–Ω', callback_data='quickremind_10')
    )
    markup.add(
        types.InlineKeyboardButton('‚è∞ 5 —Ö–≤–∏–ª–∏–Ω', callback_data='quickremind_5')
    )
    markup.add(
        types.InlineKeyboardButton('‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data='quickremind_done')
    )
    
    tag_text = f"\nüè∑Ô∏è {tag_emoji} {tag.capitalize()}" if tag != 'none' else ""
    bot.answer_callback_query(call.id, f"‚úÖ {tag_emoji} {tag.capitalize() if tag != 'none' else '–ë–µ–∑ —Ç–µ–≥—É'}")
    bot.edit_message_text(
        f"‚ö°Ô∏è –®–≤–∏–¥–∫–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è\n\n‚è∞ –û–±–µ—Ä–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (–º–æ–∂–Ω–∞ –∫—ñ–ª—å–∫–∞):\n\nüìÖ {user_states[user_id]['date']}\nüïê {user_states[user_id]['time']}\nüìù {user_states[user_id]['description']}{tag_text}\n\n–û–±—Ä–∞–Ω–æ: –Ω–µ–º–∞—î",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –¥–ª—è quickadd
@bot.callback_query_handler(func=lambda call: call.data.startswith('quickremind_'))
def callback_quickremind(call):
    user_id = str(call.message.chat.id)
    
    try:
        if call.data == 'quickremind_done':
            # –ó–∞–≤–µ—Ä—à—É—î–º–æ –≤–∏–±—ñ—Ä –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
            if not user_states[user_id].get('selected_reminders'):
                bot.answer_callback_query(call.id, "‚ùå –û–±–µ—Ä–∏ —Ö–æ—á–∞ –± –æ–¥–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è!")
                return
            
            date_str = user_states[user_id]['date']
            time_str = user_states[user_id]['time']
            description = user_states[user_id]['description']
            
            datetime_str = f"{date_str} {time_str}"
            meeting_datetime = datetime.strptime(datetime_str, "%d.%m.%Y %H:%M")
            user_now = get_user_time(user_id)
            
            if meeting_datetime <= user_now:
                bot.answer_callback_query(call.id, "‚ùå –ù–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∑—É—Å—Ç—Ä—ñ—á —É –º–∏–Ω—É–ª–æ–º—É!")
                bot.edit_message_text("‚ùå –ù–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∑—É—Å—Ç—Ä—ñ—á —É –º–∏–Ω—É–ª–æ–º—É!", call.message.chat.id, call.message.message_id)
                del user_states[user_id]
                return
            
            if user_id not in meetings:
                meetings[user_id] = []
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            notifications_status = {}
            for reminder_min in user_states[user_id]['selected_reminders']:
                notifications_status[str(reminder_min)] = False
            
            meeting = {
                "datetime": datetime_str,
                "description": description,
                "notified_before": False,
                "notified_now": False,
                "reminder_minutes": user_states[user_id]['selected_reminders'],
                "notifications_sent": notifications_status,
                "repeat": "none",
                "completed": False,
                "tag": user_states[user_id].get('tag')
            }
            
            meetings[user_id].append(meeting)
            save_meetings()
            
            tz = get_user_timezone(user_id)
            tz_str = get_timezone_string(tz)
            
            tag = user_states[user_id].get('tag')
            tag_text = f"\nüè∑Ô∏è {TAGS.get(tag, '')} {tag.capitalize()}" if tag else ""
            
            # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ –æ–±—Ä–∞–Ω–∏–º–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è–º–∏
            reminders_list = []
            for min_val in sorted(user_states[user_id]['selected_reminders'], reverse=True):
                if min_val >= 1440:
                    reminders_list.append(f"{min_val // 1440} –¥–µ–Ω—å")
                elif min_val >= 60:
                    reminders_list.append(f"{min_val // 60} –≥–æ–¥–∏–Ω–∞")
                else:
                    reminders_list.append(f"{min_val} —Ö–≤–∏–ª–∏–Ω")
            
            reminders_text = ", ".join(reminders_list)
            
            bot.answer_callback_query(call.id, "‚úÖ –ó—É—Å—Ç—Ä—ñ—á –¥–æ–¥–∞–Ω–æ!")
            bot.edit_message_text(
                f"‚úÖ –ó—É—Å—Ç—Ä—ñ—á —à–≤–∏–¥–∫–æ –¥–æ–¥–∞–Ω–æ!\n\nüìÖ {date_str}\nüïê {time_str}\nüìù {description}{tag_text}\nüåç {tz_str}\n\n‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {reminders_text}",
                call.message.chat.id, 
                call.message.message_id
            )
            
            del user_states[user_id]
        
        else:
            # –î–æ–¥–∞—î–º–æ/–ø—Ä–∏–±–∏—Ä–∞—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É
            reminder_minutes = int(call.data.replace('quickremind_', ''))
            
            if 'selected_reminders' not in user_states[user_id]:
                user_states[user_id]['selected_reminders'] = []
            
            if reminder_minutes in user_states[user_id]['selected_reminders']:
                user_states[user_id]['selected_reminders'].remove(reminder_minutes)
                bot.answer_callback_query(call.id, "‚ùå –ü—Ä–∏–±—Ä–∞–Ω–æ")
            else:
                user_states[user_id]['selected_reminders'].append(reminder_minutes)
                bot.answer_callback_query(call.id, "‚úÖ –î–æ–¥–∞–Ω–æ")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫–∏
            markup = types.InlineKeyboardMarkup()
            
            reminders_options = [
                (1440, '‚è∞ 1 –¥–µ–Ω—å'),
                (60, '‚è∞ 1 –≥–æ–¥–∏–Ω–∞'),
                (30, '‚è∞ 30 —Ö–≤–∏–ª–∏–Ω'),
                (10, '‚è∞ 10 —Ö–≤–∏–ª–∏–Ω'),
                (5, '‚è∞ 5 —Ö–≤–∏–ª–∏–Ω')
            ]
            
            for min_val, label in reminders_options:
                if min_val in user_states[user_id]['selected_reminders']:
                    label = f"‚úÖ {label}"
                
                if min_val >= 60:
                    markup.add(types.InlineKeyboardButton(label, callback_data=f'quickremind_{min_val}'))
                else:
                    if min_val == 30:
                        markup.row(
                            types.InlineKeyboardButton(label, callback_data=f'quickremind_{min_val}'),
                            types.InlineKeyboardButton('‚è∞ 10 —Ö–≤–∏–ª–∏–Ω' if 10 not in user_states[user_id]['selected_reminders'] else '‚úÖ ‚è∞ 10 —Ö–≤–∏–ª–∏–Ω', callback_data='quickremind_10')
                        )
                    elif min_val == 10:
                        continue
                    else:
                        markup.add(types.InlineKeyboardButton(label, callback_data=f'quickremind_{min_val}'))
            
            markup.add(types.InlineKeyboardButton('‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data='quickremind_done'))
            
            # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
            if user_states[user_id]['selected_reminders']:
                selected_list = []
                for min_val in sorted(user_states[user_id]['selected_reminders'], reverse=True):
                    if min_val >= 1440:
                        selected_list.append(f"{min_val // 1440} –¥–µ–Ω—å")
                    elif min_val >= 60:
                        selected_list.append(f"{min_val // 60} –≥–æ–¥")
                    else:
                        selected_list.append(f"{min_val} —Ö–≤")
                selected_text = ", ".join(selected_list)
            else:
                selected_text = "–Ω–µ–º–∞—î"
            
            tag = user_states[user_id].get('tag')
            tag_emoji = TAGS.get(tag, '') if tag else ''
            tag_text = f"\nüè∑Ô∏è {tag_emoji} {tag.capitalize()}" if tag else ""
            
            bot.edit_message_text(
                f"‚ö°Ô∏è –®–≤–∏–¥–∫–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è\n\n‚è∞ –û–±–µ—Ä–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (–º–æ–∂–Ω–∞ –∫—ñ–ª—å–∫–∞):\n\nüìÖ {user_states[user_id]['date']}\nüïê {user_states[user_id]['time']}\nüìù {user_states[user_id]['description']}{tag_text}\n\n–û–±—Ä–∞–Ω–æ: {selected_text}",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
        
    except Exception as e:
        bot.answer_callback_query(call.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞")
        bot.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}", call.message.chat.id, call.message.message_id)
        if user_id in user_states:
            del user_states[user_id]

# –ö–æ–º–∞–Ω–¥–∞ /updates (–æ–Ω–æ–≤–ª–µ–Ω–∞)
@bot.message_handler(commands=['updates'])
def updates_command(message):
    updates_text = """
üì¢ **–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–æ—Ç–∞**

üÜï (20.10.2025)

‚è∞ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ª—ñ—Ç–Ω—ñ–π/–∑–∏–º–æ–≤–∏–π —á–∞—Å**

–ë–æ—Ç —Ç–µ–ø–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∑–Ω–∞—á–∞—î —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –ª—ñ—Ç–Ω—ñ–π/–∑–∏–º–æ–≤–∏–π —á–∞—Å –¥–ª—è –≤—Å—ñ—Ö –º—ñ—Å—Ç:
- üåç –Ñ–≤—Ä–æ–ø–∞ (–ö–∏—ó–≤, –õ–æ–Ω–¥–æ–Ω, –ü–∞—Ä–∏–∂, –ë–µ—Ä–ª—ñ–Ω, –ê—Ñ—ñ–Ω–∏)
- üåé –ü—ñ–≤–Ω—ñ—á–Ω–∞ –ê–º–µ—Ä–∏–∫–∞ (–ù—å—é-–ô–æ—Ä–∫, –õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å, –î–µ–Ω–≤–µ—Ä, –ú–µ—Ö—ñ–∫–æ)
- üåè –ê–≤—Å—Ç—Ä–∞–ª—ñ—è —Ç–∞ –û–∫–µ–∞–Ω—ñ—è (–°—ñ–¥–Ω–µ–π, –û–∫–ª–µ–Ω–¥)

–ü–æ–∑–Ω–∞—á–∫–∏:
- ‚è∞ –ª—ñ—Ç–Ω—ñ–π —á–∞—Å
- ‚ùÑÔ∏è –∑–∏–º–æ–≤–∏–π —á–∞—Å


---

üîô **–ü–æ–ø–µ—Ä–µ–¥–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (19.10.2025)**

‚úèÔ∏è **–î–æ–¥–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /edit**

–ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑—É—Å—Ç—Ä—ñ—á—ñ:
- üìÖ –ó–º—ñ–Ω–∏—Ç–∏ –¥–∞—Ç—É
- üïê –ó–º—ñ–Ω–∏—Ç–∏ —á–∞—Å
- üìù –ó–º—ñ–Ω–∏—Ç–∏ –æ–ø–∏—Å
- üè∑Ô∏è –ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–≥
- ‚è∞ –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
- üîÅ –ó–º—ñ–Ω–∏—Ç–∏ —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è

---
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /help –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—Å—ñ—Ö –∫–æ–º–∞–Ω–¥
"""
    bot.reply_to(message, updates_text, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /quickadd (–æ–Ω–æ–≤–ª–µ–Ω–∞ - —Ç–µ–ø–µ—Ä —è–∫ –ø–æ–∫—Ä–æ–∫–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥)
@bot.message_handler(commands=['quickadd'])
def quick_add_meeting(message):
    user_id = str(message.chat.id)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å
    if user_id not in user_settings or 'timezone' not in user_settings[user_id]:
        user_states[user_id] = {
            'step': 'awaiting_timezone',
            'next_command': 'quickadd'
        }
        
        markup = types.InlineKeyboardMarkup(row_width=2)
        popular_timezones = get_popular_timezones()
        
        buttons = [types.InlineKeyboardButton(label, callback_data=f'tzquick_{offset}') for offset, label in popular_timezones]
        for i in range(0, len(buttons), 2):
            if i+1 < len(buttons):
                markup.add(buttons[i], buttons[i+1])
            else:
                markup.add(buttons[i])
        
        bot.reply_to(message, "üåç –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä–∏ —Å–≤—ñ–π —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å:", reply_markup=markup)
        return
    
    # –ü–æ—á–∞—Ç–æ–∫ —à–≤–∏–¥–∫–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è
    user_states[user_id] = {'step': 'quickadd_date', 'mode': 'quickadd'}
    
    markup = types.InlineKeyboardMarkup()
    today_btn = types.InlineKeyboardButton('üìÖ –°—å–æ–≥–æ–¥–Ω—ñ', callback_data='quickdate_today')
    tomorrow_btn = types.InlineKeyboardButton('üìÖ –ó–∞–≤—Ç—Ä–∞', callback_data='quickdate_tomorrow')
    other_btn = types.InlineKeyboardButton('üìÖ –Ü–Ω—à–∞ –¥–∞—Ç–∞', callback_data='quickdate_other')
    markup.add(today_btn, tomorrow_btn)
    markup.add(other_btn)
    
    tz = get_user_timezone(user_id)
    tz_str = get_timezone_string(tz)
    
    bot.reply_to(message, f"‚ö°Ô∏è –®–≤–∏–¥–∫–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑—É—Å—Ç—Ä—ñ—á—ñ\n\nüìÖ –û–±–µ—Ä–∏ –¥–∞—Ç—É:\n\nüåç –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å: {tz_str}", reply_markup=markup)

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å—É –ø–µ—Ä–µ–¥ quickadd
@bot.callback_query_handler(func=lambda call: call.data.startswith('tzquick_'))
def callback_timezone_before_quickadd(call):
    user_id = str(call.message.chat.id)
    tz_value = int(call.data.replace('tzquick_', ''))
    
    if user_id not in user_settings:
        user_settings[user_id] = {}
    
    user_settings[user_id]['timezone'] = tz_value
    save_settings()
    
    tz_str = get_timezone_string(tz_value)
    
    bot.answer_callback_query(call.id, f"‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    # –ü–æ—á–∞—Ç–æ–∫ —à–≤–∏–¥–∫–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è
    user_states[user_id] = {'step': 'quickadd_date', 'mode': 'quickadd'}
    
    markup = types.InlineKeyboardMarkup()
    today_btn = types.InlineKeyboardButton('üìÖ –°—å–æ–≥–æ–¥–Ω—ñ', callback_data='quickdate_today')
    tomorrow_btn = types.InlineKeyboardButton('üìÖ –ó–∞–≤—Ç—Ä–∞', callback_data='quickdate_tomorrow')
    other_btn = types.InlineKeyboardButton('üìÖ –Ü–Ω—à–∞ –¥–∞—Ç–∞', callback_data='quickdate_other')
    markup.add(today_btn, tomorrow_btn)
    markup.add(other_btn)
    
    bot.edit_message_text(
        f"‚úÖ –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {tz_str}\n\n‚ö°Ô∏è –®–≤–∏–¥–∫–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑—É—Å—Ç—Ä—ñ—á—ñ\n\nüìÖ –û–±–µ—Ä–∏ –¥–∞—Ç—É:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏ –¥–ª—è quickadd
@bot.callback_query_handler(func=lambda call: call.data.startswith('quickdate_'))
def callback_quickdate(call):
    user_id = str(call.message.chat.id)
    
    if call.data == 'quickdate_today':
        selected_date = get_user_time(user_id)
        user_states[user_id]['date'] = selected_date.strftime('%d.%m.%Y')
        user_states[user_id]['step'] = 'quickadd_time'
        bot.answer_callback_query(call.id, "‚úÖ –°—å–æ–≥–æ–¥–Ω—ñ")
        show_quickadd_time_selection(call.message.chat.id, call.message.message_id, user_states[user_id]['date'])
        
    elif call.data == 'quickdate_tomorrow':
        selected_date = get_user_time(user_id) + timedelta(days=1)
        user_states[user_id]['date'] = selected_date.strftime('%d.%m.%Y')
        user_states[user_id]['step'] = 'quickadd_time'
        bot.answer_callback_query(call.id, "‚úÖ –ó–∞–≤—Ç—Ä–∞")
        show_quickadd_time_selection(call.message.chat.id, call.message.message_id, user_states[user_id]['date'])
        
    elif call.data == 'quickdate_other':
        bot.answer_callback_query(call.id)
        bot.edit_message_text("üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†\n\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 20.10.2025", 
                             call.message.chat.id, call.message.message_id)
        user_states[user_id]['step'] = 'quickadd_custom_date'

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –≤–∏–±–æ—Ä—É —á–∞—Å—É –≤ quickadd
def show_quickadd_time_selection(chat_id, message_id, date_str):
    markup = types.InlineKeyboardMarkup(row_width=3)
    times = ['09:00', '10:00', '11:00', '12:00', '14:00', '15:00', '16:00', '17:00', '18:00']
    buttons = [types.InlineKeyboardButton(t, callback_data=f'quicktime_{t}') for t in times]
    
    for i in range(0, len(buttons), 3):
        markup.add(*buttons[i:i+3])
    
    markup.add(types.InlineKeyboardButton('üïê –Ü–Ω—à–∏–π —á–∞—Å', callback_data='quicktime_other'))
    
    bot.edit_message_text(f"‚ö°Ô∏è –®–≤–∏–¥–∫–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è\n\nüïê –û–±–µ—Ä–∏ —á–∞—Å –∑—É—Å—Ç—Ä—ñ—á—ñ\n(–î–∞—Ç–∞: {date_str}):", 
                         chat_id, message_id, reply_markup=markup)

# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ—ó –¥–∞—Ç–∏ –¥–ª—è quickadd
@bot.message_handler(func=lambda message: str(message.chat.id) in user_states and user_states[str(message.chat.id)].get('step') == 'quickadd_custom_date')
def process_quickadd_custom_date(message):
    user_id = str(message.chat.id)
    
    try:
        date_obj = datetime.strptime(message.text, '%d.%m.%Y')
        user_now = get_user_time(user_id)
        
        if date_obj.date() < user_now.date():
            bot.send_message(message.chat.id, "‚ùå –ù–µ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑—É—Å—Ç—Ä—ñ—á —É –º–∏–Ω—É–ª–æ–º—É! –í–≤–µ–¥–∏ —ñ–Ω—à—É –¥–∞—Ç—É:")
            return
        
        user_states[user_id]['date'] = message.text
        user_states[user_id]['step'] = 'quickadd_time'
        
        markup = types.InlineKeyboardMarkup(row_width=3)
        times = ['09:00', '10:00', '11:00', '12:00', '14:00', '15:00', '16:00', '17:00', '18:00']
        buttons = [types.InlineKeyboardButton(t, callback_data=f'quicktime_{t}') for t in times]
        
        for i in range(0, len(buttons), 3):
            markup.add(*buttons[i:i+3])
        
        markup.add(types.InlineKeyboardButton('üïê –Ü–Ω—à–∏–π —á–∞—Å', callback_data='quicktime_other'))
        
        bot.send_message(message.chat.id, f"‚ö°Ô∏è –®–≤–∏–¥–∫–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è\n\nüïê –û–±–µ—Ä–∏ —á–∞—Å –∑—É—Å—Ç—Ä—ñ—á—ñ\n(–î–∞—Ç–∞: {user_states[user_id]['date']}):", reply_markup=markup)
        
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏!\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–†–†–†–†\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 20.10.2025")

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —á–∞—Å—É –¥–ª—è quickadd
@bot.callback_query_handler(func=lambda call: call.data.startswith('quicktime_'))
def callback_quicktime(call):
    user_id = str(call.message.chat.id)
    
    if call.data == 'quicktime_other':
        bot.answer_callback_query(call.id)
        bot.edit_message_text("üïê –í–≤–µ–¥–∏ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–•\n\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 14:30", 
                             call.message.chat.id, call.message.message_id)
        user_states[user_id]['step'] = 'quickadd_custom_time'
    else:
        time_str = call.data.replace('quicktime_', '')
        user_states[user_id]['time'] = time_str
        user_states[user_id]['step'] = 'quickadd_description'
        bot.answer_callback_query(call.id, f"‚úÖ {time_str}")
        
        bot.edit_message_text(
            f"‚ö°Ô∏è –®–≤–∏–¥–∫–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è\n\nüìù –û–ø–∏—à–∏ –∑—É—Å—Ç—Ä—ñ—á\n\n–î–∞—Ç–∞: {user_states[user_id]['date']}\n–ß–∞—Å: {user_states[user_id]['time']}\n\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ó—É—Å—Ç—Ä—ñ—á –∑ –∫–ª—ñ—î–Ω—Ç–æ–º",
            call.message.chat.id, call.message.message_id
        )

# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —á–∞—Å—É –¥–ª—è quickadd
@bot.message_handler(func=lambda message: str(message.chat.id) in user_states and user_states[str(message.chat.id)].get('step') == 'quickadd_custom_time')
def process_quickadd_custom_time(message):
    user_id = str(message.chat.id)
    
    try:
        time_obj = datetime.strptime(message.text, '%H:%M')
        user_states[user_id]['time'] = message.text
        user_states[user_id]['step'] = 'quickadd_description'
        
        bot.send_message(message.chat.id, f"‚ö°Ô∏è –®–≤–∏–¥–∫–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è\n\nüìù –û–ø–∏—à–∏ –∑—É—Å—Ç—Ä—ñ—á\n\n–î–∞—Ç–∞: {user_states[user_id]['date']}\n–ß–∞—Å: {user_states[user_id]['time']}\n\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ó—É—Å—Ç—Ä—ñ—á –∑ –∫–ª—ñ—î–Ω—Ç–æ–º")
        
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É!\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ñ–æ—Ä–º–∞—Ç: –ì–ì:–•–•\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 14:30")

# –û–±—Ä–æ–±–∫–∞ –æ–ø–∏—Å—É –¥–ª—è quickadd
@bot.message_handler(func=lambda message: str(message.chat.id) in user_states and user_states[str(message.chat.id)].get('step') == 'quickadd_description')
def process_quickadd_description(message):
    user_id = str(message.chat.id)
    
    user_states[user_id]['description'] = message.text
    user_states[user_id]['step'] = 'quickadd_tag'
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤–∏–±–æ—Ä—É —Ç–µ–≥—É
    markup = types.InlineKeyboardMarkup(row_width=2)
    tag_buttons = [
        types.InlineKeyboardButton(f"{emoji} {tag.capitalize()}", callback_data=f'quicktag_{tag}')
        for tag, emoji in TAGS.items()
    ]
    
    for i in range(0, len(tag_buttons), 2):
        markup.add(*tag_buttons[i:i+2])
    
    markup.add(types.InlineKeyboardButton('‚û°Ô∏è –ë–µ–∑ —Ç–µ–≥—É', callback_data='quicktag_none'))
    
    bot.send_message(
        message.chat.id,
        f"‚ö°Ô∏è –®–≤–∏–¥–∫–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è\n\nüè∑Ô∏è –û–±–µ—Ä–∏ —Ç–µ–≥ –¥–ª—è –∑—É—Å—Ç—Ä—ñ—á—ñ:\n\nüìù {message.text}",
        reply_markup=markup
    )

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–µ–≥—É –¥–ª—è quickadd
@bot.callback_query_handler(func=lambda call: call.data.startswith('quicktag_'))
def callback_quicktag(call):
    user_id = str(call.message.chat.id)
    tag = call.data.replace('quicktag_', '')
    
    if tag == 'none':
        user_states[user_id]['tag'] = None
        tag_emoji = ''
    else:
        user_states[user_id]['tag'] = tag
        tag_emoji = TAGS.get(tag, '')
    
    user_states[user_id]['step'] = 'quickadd_reminder'
    user_states[user_id]['selected_reminders'] = []
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤–∏–±–æ—Ä—É —á–∞—Å—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton('‚è∞ 1 –¥–µ–Ω—å', callback_data='quickremind_1440'),
        types.InlineKeyboardButton('‚è∞ 1 –≥–æ–¥–∏–Ω–∞', callback_data='quickremind_60')
    )
    markup.add(
        types.InlineKeyboardButton('‚è∞ 30 —Ö–≤–∏–ª–∏–Ω', callback_data='quickremind_30'),
        types.InlineKeyboardButton('‚è∞ 10 —Ö–≤–∏–ª–∏–Ω', callback_data='quickremind_10')
    )
    markup.add(
        types.InlineKeyboardButton('‚è∞ 5 —Ö–≤–∏–ª–∏–Ω', callback_data='quickremind_5')
    )
    markup.add(
        types.InlineKeyboardButton('‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data='quickremind_done')
    )
    
    tag_text = f"\nüè∑Ô∏è {tag_emoji} {tag.capitalize()}" if tag != 'none' else ""
    bot.answer_callback_query(call.id, f"‚úÖ {tag_emoji} {tag.capitalize() if tag != 'none' else '–ë–µ–∑ —Ç–µ–≥—É'}")
    bot.edit_message_text(
        f"‚ö°Ô∏è –®–≤–∏–¥–∫–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è\n\n‚è∞ –û–±–µ—Ä–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (–º–æ–∂–Ω–∞ –∫—ñ–ª—å–∫–∞):\n\nüìÖ {user_states[user_id]['date']}\nüïê {user_states[user_id]['time']}\nüìù {user_states[user_id]['description']}{tag_text}\n\n–û–±—Ä–∞–Ω–æ: –Ω–µ–º–∞—î",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –¥–ª—è quickadd
@bot.callback_query_handler(func=lambda call: call.data.startswith('quickremind_'))
def callback_quickremind(call):
    user_id = str(call.message.chat.id)
    
    try:
        if call.data == 'quickremind_done':
            # –ó–∞–≤–µ—Ä—à—É—î–º–æ –≤–∏–±—ñ—Ä –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
            if not user_states[user_id].get('selected_reminders'):
                bot.answer_callback_query(call.id, "‚ùå –û–±–µ—Ä–∏ —Ö–æ—á–∞ –± –æ–¥–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è!")
                return
            
            date_str = user_states[user_id]['date']
            time_str = user_states[user_id]['time']
            description = user_states[user_id]['description']
            
            datetime_str = f"{date_str} {time_str}"
            meeting_datetime = datetime.strptime(datetime_str, "%d.%m.%Y %H:%M")
            user_now = get_user_time(user_id)
            
            if meeting_datetime <= user_now:
                bot.answer_callback_query(call.id, "‚ùå –ù–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∑—É—Å—Ç—Ä—ñ—á —É –º–∏–Ω—É–ª–æ–º—É!")
                bot.edit_message_text("‚ùå –ù–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∑—É—Å—Ç—Ä—ñ—á —É –º–∏–Ω—É–ª–æ–º—É!", call.message.chat.id, call.message.message_id)
                del user_states[user_id]
                return
            
            if user_id not in meetings:
                meetings[user_id] = []
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            notifications_status = {}
            for reminder_min in user_states[user_id]['selected_reminders']:
                notifications_status[str(reminder_min)] = False
            
            meeting = {
                "datetime": datetime_str,
                "description": description,
                "notified_before": False,
                "notified_now": False,
                "reminder_minutes": user_states[user_id]['selected_reminders'],
                "notifications_sent": notifications_status,
                "repeat": "none",
                "completed": False,
                "tag": user_states[user_id].get('tag')
            }
            
            meetings[user_id].append(meeting)
            save_meetings()
            
            tz = get_user_timezone(user_id)
            tz_str = get_timezone_string(tz)
            
            tag = user_states[user_id].get('tag')
            tag_text = f"\nüè∑Ô∏è {TAGS.get(tag, '')} {tag.capitalize()}" if tag else ""
            
            # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ –æ–±—Ä–∞–Ω–∏–º–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è–º–∏
            reminders_list = []
            for min_val in sorted(user_states[user_id]['selected_reminders'], reverse=True):
                if min_val >= 1440:
                    reminders_list.append(f"{min_val // 1440} –¥–µ–Ω—å")
                elif min_val >= 60:
                    reminders_list.append(f"{min_val // 60} –≥–æ–¥–∏–Ω–∞")
                else:
                    reminders_list.append(f"{min_val} —Ö–≤–∏–ª–∏–Ω")
            
            reminders_text = ", ".join(reminders_list)
            
            bot.answer_callback_query(call.id, "‚úÖ –ó—É—Å—Ç—Ä—ñ—á –¥–æ–¥–∞–Ω–æ!")
            bot.edit_message_text(
                f"‚úÖ –ó—É—Å—Ç—Ä—ñ—á —à–≤–∏–¥–∫–æ –¥–æ–¥–∞–Ω–æ!\n\nüìÖ {date_str}\nüïê {time_str}\nüìù {description}{tag_text}\nüåç {tz_str}\n\n‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {reminders_text}",
                call.message.chat.id, 
                call.message.message_id
            )
            
            del user_states[user_id]
        
        else:
            # –î–æ–¥–∞—î–º–æ/–ø—Ä–∏–±–∏—Ä–∞—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É
            reminder_minutes = int(call.data.replace('quickremind_', ''))
            
            if 'selected_reminders' not in user_states[user_id]:
                user_states[user_id]['selected_reminders'] = []
            
            if reminder_minutes in user_states[user_id]['selected_reminders']:
                user_states[user_id]['selected_reminders'].remove(reminder_minutes)
                bot.answer_callback_query(call.id, "‚ùå –ü—Ä–∏–±—Ä–∞–Ω–æ")
            else:
                user_states[user_id]['selected_reminders'].append(reminder_minutes)
                bot.answer_callback_query(call.id, "‚úÖ –î–æ–¥–∞–Ω–æ")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫–∏
            markup = types.InlineKeyboardMarkup()
            
            reminders_options = [
                (1440, '‚è∞ 1 –¥–µ–Ω—å'),
                (60, '‚è∞ 1 –≥–æ–¥–∏–Ω–∞'),
                (30, '‚è∞ 30 —Ö–≤–∏–ª–∏–Ω'),
                (10, '‚è∞ 10 —Ö–≤–∏–ª–∏–Ω'),
                (5, '‚è∞ 5 —Ö–≤–∏–ª–∏–Ω')
            ]
            
            for min_val, label in reminders_options:
                if min_val in user_states[user_id]['selected_reminders']:
                    label = f"‚úÖ {label}"
                
                if min_val >= 60:
                    markup.add(types.InlineKeyboardButton(label, callback_data=f'quickremind_{min_val}'))
                else:
                    if min_val == 30:
                        markup.row(
                            types.InlineKeyboardButton(label, callback_data=f'quickremind_{min_val}'),
                            types.InlineKeyboardButton('‚è∞ 10 —Ö–≤–∏–ª–∏–Ω' if 10 not in user_states[user_id]['selected_reminders'] else '‚úÖ ‚è∞ 10 —Ö–≤–∏–ª–∏–Ω', callback_data='quickremind_10')
                        )
                    elif min_val == 10:
                        continue
                    else:
                        markup.add(types.InlineKeyboardButton(label, callback_data=f'quickremind_{min_val}'))
            
            markup.add(types.InlineKeyboardButton('‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data='quickremind_done'))
            
            # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
            if user_states[user_id]['selected_reminders']:
                selected_list = []
                for min_val in sorted(user_states[user_id]['selected_reminders'], reverse=True):
                    if min_val >= 1440:
                        selected_list.append(f"{min_val // 1440} –¥–µ–Ω—å")
                    elif min_val >= 60:
                        selected_list.append(f"{min_val // 60} –≥–æ–¥")
                    else:
                        selected_list.append(f"{min_val} —Ö–≤")
                selected_text = ", ".join(selected_list)
            else:
                selected_text = "–Ω–µ–º–∞—î"
            
            tag = user_states[user_id].get('tag')
            tag_emoji = TAGS.get(tag, '') if tag else ''
            tag_text = f"\nüè∑Ô∏è {tag_emoji} {tag.capitalize()}" if tag else ""
            
            bot.edit_message_text(
                f"‚ö°Ô∏è –®–≤–∏–¥–∫–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è\n\n‚è∞ –û–±–µ—Ä–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (–º–æ–∂–Ω–∞ –∫—ñ–ª—å–∫–∞):\n\nüìÖ {user_states[user_id]['date']}\nüïê {user_states[user_id]['time']}\nüìù {user_states[user_id]['description']}{tag_text}\n\n–û–±—Ä–∞–Ω–æ: {selected_text}",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
        
    except Exception as e:
        bot.answer_callback_query(call.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞")
        bot.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}", call.message.chat.id, call.message.message_id)
        if user_id in user_states:
            del user_states[user_id]

# –ö–æ–º–∞–Ω–¥–∞ /list
@bot.message_handler(commands=['list'])
def list_meetings_command(message):
    user_id = str(message.chat.id)
    
    clean_old_meetings()
    
    if user_id not in meetings or not meetings[user_id]:
        bot.reply_to(message, "üì≠ –£ —Ç–µ–±–µ –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –∑—É—Å—Ç—Ä—ñ—á–µ–π.\n\n–î–æ–¥–∞–π –∑—É—Å—Ç—Ä—ñ—á –∫–æ–º–∞–Ω–¥–æ—é /add")
        return
    
    user_meetings = sorted(meetings[user_id], key=lambda x: x['datetime'])
    
    tz = get_user_timezone(user_id)
    tz_str = get_timezone_string(tz)
    
    response = f"üìã –¢–≤–æ—ó –∑—É—Å—Ç—Ä—ñ—á—ñ (üåç {tz_str}):\n\n"
    for i, meeting in enumerate(user_meetings, 1):
        dt = datetime.strptime(meeting['datetime'], "%d.%m.%Y %H:%M")
        tag = meeting.get('tag')
        tag_text = f" {TAGS.get(tag, '')}" if tag else ""
        repeat_emoji = " üîÅ" if meeting.get('repeat', 'none') != 'none' else ""
        response += f"{i}. üìÖ {dt.strftime('%d.%m.%Y')} üïê {dt.strftime('%H:%M')}{tag_text}{repeat_emoji}\n   üìù {meeting['description']}\n\n"
    
    bot.reply_to(message, response)

# –ö–æ–º–∞–Ω–¥–∞ /listbytag –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
@bot.message_handler(commands=['listbytag'])
def list_by_tag_command(message):
    user_id = str(message.chat.id)
    
    clean_old_meetings()
    
    if user_id not in meetings or not meetings[user_id]:
        bot.reply_to(message, "üì≠ –£ —Ç–µ–±–µ –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –∑—É—Å—Ç—Ä—ñ—á–µ–π.")
        return
    
    markup = types.InlineKeyboardMarkup(row_width=2)
    tag_buttons = [
        types.InlineKeyboardButton(f"{emoji} {tag.capitalize()}", callback_data=f'filter_{tag}')
        for tag, emoji in TAGS.items()
    ]
    
    for i in range(0, len(tag_buttons), 2):
        markup.add(*tag_buttons[i:i+2])
    
    markup.add(types.InlineKeyboardButton('üìã –í—Å—ñ –∑—É—Å—Ç—Ä—ñ—á—ñ', callback_data='filter_all'))
    
    bot.reply_to(message, "üè∑Ô∏è –§—ñ–ª—å—Ç—Ä –∑–∞ —Ç–µ–≥–æ–º:", reply_markup=markup)

# –û–±—Ä–æ–±–Ω–∏–∫ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∑–∞ —Ç–µ–≥–∞–º–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('filter_'))
def callback_filter(call):
    user_id = str(call.message.chat.id)
    filter_tag = call.data.replace('filter_', '')
    
    if user_id not in meetings or not meetings[user_id]:
        bot.answer_callback_query(call.id, "üì≠ –ù–µ–º–∞—î –∑—É—Å—Ç—Ä—ñ—á–µ–π")
        return
    
    if filter_tag == 'all':
        filtered_meetings = meetings[user_id]
    else:
        filtered_meetings = [m for m in meetings[user_id] if m.get('tag') == filter_tag]
    
    if not filtered_meetings:
        bot.answer_callback_query(call.id, f"üì≠ –ù–µ–º–∞—î –∑—É—Å—Ç—Ä—ñ—á–µ–π –∑ —Ç–µ–≥–æ–º {filter_tag}")
        bot.edit_message_text(
            f"üì≠ –ù–µ–º–∞—î –∑—É—Å—Ç—Ä—ñ—á–µ–π –∑ —Ç–µ–≥–æ–º {TAGS.get(filter_tag, '')} {filter_tag.capitalize()}",
            call.message.chat.id,
            call.message.message_id
        )
        return
    
    filtered_meetings = sorted(filtered_meetings, key=lambda x: x['datetime'])
    
    tz = get_user_timezone(user_id)
    tz_str = get_timezone_string(tz)
    
    tag_emoji = TAGS.get(filter_tag, '') if filter_tag != 'all' else 'üìã'
    tag_name = filter_tag.capitalize() if filter_tag != 'all' else '–í—Å—ñ'
    
    response = f"üè∑Ô∏è {tag_emoji} {tag_name} (üåç {tz_str}):\n\n"
    for i, meeting in enumerate(filtered_meetings, 1):
        dt = datetime.strptime(meeting['datetime'], "%d.%m.%Y %H:%M")
        tag = meeting.get('tag')
        tag_text = f" {TAGS.get(tag, '')}" if tag else ""
        repeat_emoji = " üîÅ" if meeting.get('repeat', 'none') != 'none' else ""
        response += f"{i}. üìÖ {dt.strftime('%d.%m.%Y')} üïê {dt.strftime('%H:%M')}{tag_text}{repeat_emoji}\n   üìù {meeting['description']}\n\n"
    
    bot.answer_callback_query(call.id)
    bot.edit_message_text(response, call.message.chat.id, call.message.message_id)

# –ö–æ–º–∞–Ω–¥–∞ /edit
@bot.message_handler(commands=['edit'])
def edit_meeting_command(message):
    user_id = str(message.chat.id)
    
    clean_old_meetings()
    
    if user_id not in meetings or not meetings[user_id]:
        bot.reply_to(message, "üì≠ –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –∑—É—Å—Ç—Ä—ñ—á–µ–π –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.\n\n–î–æ–¥–∞–π –∑—É—Å—Ç—Ä—ñ—á –∫–æ–º–∞–Ω–¥–æ—é /add")
        return
    
    markup = types.InlineKeyboardMarkup()
    
    for i, meeting in enumerate(meetings[user_id]):
        dt = datetime.strptime(meeting['datetime'], "%d.%m.%Y %H:%M")
        tag = meeting.get('tag')
        tag_text = f"{TAGS.get(tag, '')} " if tag else ""
        repeat_emoji = " üîÅ" if meeting.get('repeat', 'none') != 'none' else ""
        button_text = f"{tag_text}{dt.strftime('%d.%m %H:%M')}{repeat_emoji} - {meeting['description'][:25]}"
        callback_data = f"edit_select_{i}"
        markup.add(types.InlineKeyboardButton(button_text, callback_data=callback_data))
    
    bot.reply_to(message, "‚úèÔ∏è –û–±–µ—Ä–∏ –∑—É—Å—Ç—Ä—ñ—á –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:", reply_markup=markup)

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∑—É—Å—Ç—Ä—ñ—á—ñ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_select_'))
def callback_edit_select(call):
    user_id = str(call.message.chat.id)
    meeting_index = int(call.data.replace('edit_select_', ''))
    
    if user_id not in meetings or meeting_index >= len(meetings[user_id]):
        bot.answer_callback_query(call.id, "‚ùå –ó—É—Å—Ç—Ä—ñ—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    meeting = meetings[user_id][meeting_index]
    tag = meeting.get('tag')
    tag_text = f"\nüè∑Ô∏è {TAGS.get(tag, '')} {tag.capitalize()}" if tag else ""
    
    repeat_text = {
        'none': '',
        'daily': ' üîÅ –©–æ–¥–µ–Ω–Ω–æ',
        'weekly': ' üîÅ –©–æ—Ç–∏–∂–Ω—è',
        'monthly': ' üîÅ –©–æ–º—ñ—Å—è—Ü—è'
    }.get(meeting.get('repeat', 'none'), '')
    
    # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Å–ø–∏—Å–æ–∫ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
    reminder_minutes_list = meeting.get('reminder_minutes', [])
    if isinstance(reminder_minutes_list, int):
        reminder_minutes_list = [reminder_minutes_list]
    
    reminders_list = []
    for min_val in sorted(reminder_minutes_list, reverse=True):
        if min_val >= 1440:
            reminders_list.append(f"{min_val // 1440}–¥")
        elif min_val >= 60:
            reminders_list.append(f"{min_val // 60}–≥")
        else:
            reminders_list.append(f"{min_val}—Ö–≤")
    
    reminders_text = ", ".join(reminders_list) if reminders_list else "–Ω–µ–º–∞—î"
    
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton('üìÖ –î–∞—Ç—É', callback_data=f'edit_date_{meeting_index}'),
        types.InlineKeyboardButton('üïê –ß–∞—Å', callback_data=f'edit_time_{meeting_index}')
    )
    markup.add(
        types.InlineKeyboardButton('üìù –û–ø–∏—Å', callback_data=f'edit_desc_{meeting_index}'),
        types.InlineKeyboardButton('üè∑Ô∏è –¢–µ–≥', callback_data=f'edit_tag_{meeting_index}')
    )
    markup.add(
        types.InlineKeyboardButton('‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', callback_data=f'edit_remind_{meeting_index}'),
        types.InlineKeyboardButton('üîÅ –ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è', callback_data=f'edit_repeat_{meeting_index}')
    )
    markup.add(
        types.InlineKeyboardButton('‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data='edit_cancel')
    )
    
    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        f"‚úèÔ∏è **–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑—É—Å—Ç—Ä—ñ—á—ñ:**\n\n"
        f"üìÖ {meeting['datetime']}\n"
        f"üìù {meeting['description']}{tag_text}{repeat_text}\n"
        f"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {reminders_text}\n\n"
        f"–©–æ —Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏?",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup,
        parse_mode='Markdown'
    )

# –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_date_'))
def callback_edit_date(call):
    user_id = str(call.message.chat.id)
    meeting_index = int(call.data.replace('edit_date_', ''))
    
    user_states[user_id] = {
        'step': 'edit_date',
        'meeting_index': meeting_index
    }
    
    markup = types.InlineKeyboardMarkup()
    today_btn = types.InlineKeyboardButton('üìÖ –°—å–æ–≥–æ–¥–Ω—ñ', callback_data=f'editdate_today_{meeting_index}')
    tomorrow_btn = types.InlineKeyboardButton('üìÖ –ó–∞–≤—Ç—Ä–∞', callback_data=f'editdate_tomorrow_{meeting_index}')
    other_btn = types.InlineKeyboardButton('üìÖ –Ü–Ω—à–∞ –¥–∞—Ç–∞', callback_data=f'editdate_other_{meeting_index}')
    markup.add(today_btn, tomorrow_btn)
    markup.add(other_btn)
    markup.add(types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=f'edit_select_{meeting_index}'))
    
    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        "üìÖ –û–±–µ—Ä–∏ –Ω–æ–≤—É –¥–∞—Ç—É:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –Ω–æ–≤–æ—ó –¥–∞—Ç–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('editdate_'))
def callback_editdate(call):
    user_id = str(call.message.chat.id)
    parts = call.data.split('_')
    date_type = parts[1]
    meeting_index = int(parts[2])
    
    if date_type == 'today':
        selected_date = get_user_time(user_id)
        new_date = selected_date.strftime('%d.%m.%Y')
    elif date_type == 'tomorrow':
        selected_date = get_user_time(user_id) + timedelta(days=1)
        new_date = selected_date.strftime('%d.%m.%Y')
    elif date_type == 'other':
        user_states[user_id] = {
            'step': 'edit_custom_date',
            'meeting_index': meeting_index
        }
        bot.answer_callback_query(call.id)
        bot.edit_message_text(
            "üìÖ –í–≤–µ–¥–∏ –Ω–æ–≤—É –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†\n\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 25.10.2025",
            call.message.chat.id,
            call.message.message_id
        )
        return
    else:
        return
    
    meeting = meetings[user_id][meeting_index]
    old_time = meeting['datetime'].split()[1]
    meeting['datetime'] = f"{new_date} {old_time}"
    
    # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    meeting['notified_before'] = False
    meeting['notified_now'] = False
    if 'notifications_sent' in meeting:
        for key in meeting['notifications_sent']:
            meeting['notifications_sent'][key] = False
    
    save_meetings()
    
    bot.answer_callback_query(call.id, "‚úÖ –î–∞—Ç—É –∑–º—ñ–Ω–µ–Ω–æ")
    
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    tag = meeting.get('tag')
    tag_text = f"\nüè∑Ô∏è {TAGS.get(tag, '')} {tag.capitalize()}" if tag else ""
    
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton('üìÖ –î–∞—Ç—É', callback_data=f'edit_date_{meeting_index}'),
        types.InlineKeyboardButton('üïê –ß–∞—Å', callback_data=f'edit_time_{meeting_index}')
    )
    markup.add(
        types.InlineKeyboardButton('üìù –û–ø–∏—Å', callback_data=f'edit_desc_{meeting_index}'),
        types.InlineKeyboardButton('üè∑Ô∏è –¢–µ–≥', callback_data=f'edit_tag_{meeting_index}')
    )
    markup.add(
        types.InlineKeyboardButton('‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', callback_data=f'edit_remind_{meeting_index}'),
        types.InlineKeyboardButton('üîÅ –ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è', callback_data=f'edit_repeat_{meeting_index}')
    )
    markup.add(
        types.InlineKeyboardButton('‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data='edit_done')
    )
    
    bot.edit_message_text(
        f"‚úÖ –î–∞—Ç—É –∑–º—ñ–Ω–µ–Ω–æ!\n\n"
        f"üìÖ {meeting['datetime']}\n"
        f"üìù {meeting['description']}{tag_text}\n\n"
        f"–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è?",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ—ó –¥–∞—Ç–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
@bot.message_handler(func=lambda message: str(message.chat.id) in user_states and user_states[str(message.chat.id)].get('step') == 'edit_custom_date')
def process_edit_custom_date(message):
    user_id = str(message.chat.id)
    meeting_index = user_states[user_id]['meeting_index']
    
    try:
        date_obj = datetime.strptime(message.text, '%d.%m.%Y')
        user_now = get_user_time(user_id)
        
        if date_obj.date() < user_now.date():
            bot.send_message(message.chat.id, "‚ùå –ù–µ –º–æ–∂–Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –¥–∞—Ç—É —É –º–∏–Ω—É–ª–æ–º—É! –í–≤–µ–¥–∏ —ñ–Ω—à—É –¥–∞—Ç—É:")
            return
        
        meeting = meetings[user_id][meeting_index]
        old_time = meeting['datetime'].split()[1]
        meeting['datetime'] = f"{message.text} {old_time}"
        
        # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        meeting['notified_before'] = False
        meeting['notified_now'] = False
        if 'notifications_sent' in meeting:
            for key in meeting['notifications_sent']:
                meeting['notifications_sent'][key] = False
        
        save_meetings()
        
        tag = meeting.get('tag')
        tag_text = f"\nüè∑Ô∏è {TAGS.get(tag, '')} {tag.capitalize()}" if tag else ""
        
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton('üìÖ –î–∞—Ç—É', callback_data=f'edit_date_{meeting_index}'),
            types.InlineKeyboardButton('üïê –ß–∞—Å', callback_data=f'edit_time_{meeting_index}')
        )
        markup.add(
            types.InlineKeyboardButton('üìù –û–ø–∏—Å', callback_data=f'edit_desc_{meeting_index}'),
            types.InlineKeyboardButton('üè∑Ô∏è –¢–µ–≥', callback_data=f'edit_tag_{meeting_index}')
        )
        markup.add(
            types.InlineKeyboardButton('‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', callback_data=f'edit_remind_{meeting_index}'),
            types.InlineKeyboardButton('üîÅ –ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è', callback_data=f'edit_repeat_{meeting_index}')
        )
        markup.add(
            types.InlineKeyboardButton('‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data='edit_done')
        )
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ –î–∞—Ç—É –∑–º—ñ–Ω–µ–Ω–æ!\n\n"
            f"üìÖ {meeting['datetime']}\n"
            f"üìù {meeting['description']}{tag_text}\n\n"
            f"–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è?",
            reply_markup=markup
        )
        
        del user_states[user_id]
        
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏!\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–†–†–†–†\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 25.10.2025")

# –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —á–∞—Å—É
@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_time_'))
def callback_edit_time(call):
    user_id = str(call.message.chat.id)
    meeting_index = int(call.data.replace('edit_time_', ''))
    
    user_states[user_id] = {
        'step': 'edit_time',
        'meeting_index': meeting_index
    }
    
    markup = types.InlineKeyboardMarkup(row_width=3)
    times = ['09:00', '10:00', '11:00', '12:00', '14:00', '15:00', '16:00', '17:00', '18:00']
    buttons = [types.InlineKeyboardButton(t, callback_data=f'edittime_{t}_{meeting_index}') for t in times]
    
    for i in range(0, len(buttons), 3):
        markup.add(*buttons[i:i+3])
    
    markup.add(types.InlineKeyboardButton('üïê –Ü–Ω—à–∏–π —á–∞—Å', callback_data=f'edittime_other_{meeting_index}'))
    markup.add(types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=f'edit_select_{meeting_index}'))
    
    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        "üïê –û–±–µ—Ä–∏ –Ω–æ–≤–∏–π —á–∞—Å:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –Ω–æ–≤–æ–≥–æ —á–∞—Å—É
@bot.callback_query_handler(func=lambda call: call.data.startswith('edittime_'))
def callback_edittime(call):
    user_id = str(call.message.chat.id)
    parts = call.data.split('_')
    
    if parts[1] == 'other':
        meeting_index = int(parts[2])
        user_states[user_id] = {
            'step': 'edit_custom_time',
            'meeting_index': meeting_index
        }
        bot.answer_callback_query(call.id)
        bot.edit_message_text(
            "üïê –í–≤–µ–¥–∏ –Ω–æ–≤–∏–π —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–•\n\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 15:30",
            call.message.chat.id,
            call.message.message_id
        )
        return
    
    new_time = parts[1]
    meeting_index = int(parts[2])
    
    meeting = meetings[user_id][meeting_index]
    old_date = meeting['datetime'].split()[0]
    meeting['datetime'] = f"{old_date} {new_time}"
    
    # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    meeting['notified_before'] = False
    meeting['notified_now'] = False
    if 'notifications_sent' in meeting:
        for key in meeting['notifications_sent']:
            meeting['notifications_sent'][key] = False
    
    save_meetings()
    
    bot.answer_callback_query(call.id, "‚úÖ –ß–∞—Å –∑–º—ñ–Ω–µ–Ω–æ")
    
    tag = meeting.get('tag')
    tag_text = f"\nüè∑Ô∏è {TAGS.get(tag, '')} {tag.capitalize()}" if tag else ""
    
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton('üìÖ –î–∞—Ç—É', callback_data=f'edit_date_{meeting_index}'),
        types.InlineKeyboardButton('üïê –ß–∞—Å', callback_data=f'edit_time_{meeting_index}')
    )
    markup.add(
        types.InlineKeyboardButton('üìù –û–ø–∏—Å', callback_data=f'edit_desc_{meeting_index}'),
        types.InlineKeyboardButton('üè∑Ô∏è –¢–µ–≥', callback_data=f'edit_tag_{meeting_index}')
    )
    markup.add(
        types.InlineKeyboardButton('‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', callback_data=f'edit_remind_{meeting_index}'),
        types.InlineKeyboardButton('üîÅ –ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è', callback_data=f'edit_repeat_{meeting_index}')
    )
    markup.add(
        types.InlineKeyboardButton('‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data='edit_done')
    )
    
    bot.edit_message_text(
        f"‚úÖ –ß–∞—Å –∑–º—ñ–Ω–µ–Ω–æ!\n\n"
        f"üìÖ {meeting['datetime']}\n"
        f"üìù {meeting['description']}{tag_text}\n\n"
        f"–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è?",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —á–∞—Å—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
@bot.message_handler(func=lambda message: str(message.chat.id) in user_states and user_states[str(message.chat.id)].get('step') == 'edit_custom_time')
def process_edit_custom_time(message):
    user_id = str(message.chat.id)
    meeting_index = user_states[user_id]['meeting_index']
    
    try:
        time_obj = datetime.strptime(message.text, '%H:%M')
        
        meeting = meetings[user_id][meeting_index]
        old_date = meeting['datetime'].split()[0]
        meeting['datetime'] = f"{old_date} {message.text}"
        
        # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        meeting['notified_before'] = False
        meeting['notified_now'] = False
        if 'notifications_sent' in meeting:
            for key in meeting['notifications_sent']:
                meeting['notifications_sent'][key] = False
        
        save_meetings()
        
        tag = meeting.get('tag')
        tag_text = f"\nüè∑Ô∏è {TAGS.get(tag, '')} {tag.capitalize()}" if tag else ""
        
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton('üìÖ –î–∞—Ç—É', callback_data=f'edit_date_{meeting_index}'),
            types.InlineKeyboardButton('üïê –ß–∞—Å', callback_data=f'edit_time_{meeting_index}')
        )
        markup.add(
            types.InlineKeyboardButton('üìù –û–ø–∏—Å', callback_data=f'edit_desc_{meeting_index}'),
            types.InlineKeyboardButton('üè∑Ô∏è –¢–µ–≥', callback_data=f'edit_tag_{meeting_index}')
        )
        markup.add(
            types.InlineKeyboardButton('‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', callback_data=f'edit_remind_{meeting_index}'),
            types.InlineKeyboardButton('üîÅ –ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è', callback_data=f'edit_repeat_{meeting_index}')
        )
        markup.add(
            types.InlineKeyboardButton('‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data='edit_done')
        )
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ß–∞—Å –∑–º—ñ–Ω–µ–Ω–æ!\n\n"
            f"üìÖ {meeting['datetime']}\n"
            f"üìù {meeting['description']}{tag_text}\n\n"
            f"–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è?",
            reply_markup=markup
        )
        
        del user_states[user_id]
        
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É!\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ñ–æ—Ä–º–∞—Ç: –ì–ì:–•–•\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 15:30")

# –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –æ–ø–∏—Å—É
@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_desc_'))
def callback_edit_desc(call):
    user_id = str(call.message.chat.id)
    meeting_index = int(call.data.replace('edit_desc_', ''))
    
    user_states[user_id] = {
        'step': 'edit_description',
        'meeting_index': meeting_index
    }
    
    meeting = meetings[user_id][meeting_index]
    
    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        f"üìù –ü–æ—Ç–æ—á–Ω–∏–π –æ–ø–∏—Å:\n{meeting['description']}\n\n–í–≤–µ–¥–∏ –Ω–æ–≤–∏–π –æ–ø–∏—Å:",
        call.message.chat.id,
        call.message.message_id
    )

# –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å—É
@bot.message_handler(func=lambda message: str(message.chat.id) in user_states and user_states[str(message.chat.id)].get('step') == 'edit_description')
def process_edit_description(message):
    user_id = str(message.chat.id)
    meeting_index = user_states[user_id]['meeting_index']
    
    meeting = meetings[user_id][meeting_index]
    meeting['description'] = message.text
    save_meetings()
    
    tag = meeting.get('tag')
    tag_text = f"\nüè∑Ô∏è {TAGS.get(tag, '')} {tag.capitalize()}" if tag else ""
    
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton('üìÖ –î–∞—Ç—É', callback_data=f'edit_date_{meeting_index}'),
        types.InlineKeyboardButton('üïê –ß–∞—Å', callback_data=f'edit_time_{meeting_index}')
    )
    markup.add(
        types.InlineKeyboardButton('üìù –û–ø–∏—Å', callback_data=f'edit_desc_{meeting_index}'),
        types.InlineKeyboardButton('üè∑Ô∏è –¢–µ–≥', callback_data=f'edit_tag_{meeting_index}')
    )
    markup.add(
        types.InlineKeyboardButton('‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', callback_data=f'edit_remind_{meeting_index}'),
        types.InlineKeyboardButton('üîÅ –ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è', callback_data=f'edit_repeat_{meeting_index}')
    )
    markup.add(
        types.InlineKeyboardButton('‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data='edit_done')
    )
    
    bot.send_message(
        message.chat.id,
        f"‚úÖ –û–ø–∏—Å –∑–º—ñ–Ω–µ–Ω–æ!\n\n"
        f"üìÖ {meeting['datetime']}\n"
        f"üìù {meeting['description']}{tag_text}\n\n"
        f"–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è?",
        reply_markup=markup
    )
    
    del user_states[user_id]

# –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–≥—É
@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_tag_'))
def callback_edit_tag(call):
    user_id = str(call.message.chat.id)
    meeting_index = int(call.data.replace('edit_tag_', ''))
    
    markup = types.InlineKeyboardMarkup(row_width=2)
    tag_buttons = [
        types.InlineKeyboardButton(f"{emoji} {tag.capitalize()}", callback_data=f'edittag_{tag}_{meeting_index}')
        for tag, emoji in TAGS.items()
    ]
    
    for i in range(0, len(tag_buttons), 2):
        markup.add(*tag_buttons[i:i+2])
    
    markup.add(types.InlineKeyboardButton('‚û°Ô∏è –ë–µ–∑ —Ç–µ–≥—É', callback_data=f'edittag_none_{meeting_index}'))
    markup.add(types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=f'edit_select_{meeting_index}'))
    
    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        "üè∑Ô∏è –û–±–µ—Ä–∏ –Ω–æ–≤–∏–π —Ç–µ–≥:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –Ω–æ–≤–æ–≥–æ —Ç–µ–≥—É
@bot.callback_query_handler(func=lambda call: call.data.startswith('edittag_'))
def callback_edittag(call):
    user_id = str(call.message.chat.id)
    parts = call.data.split('_')
    new_tag = parts[1]
    meeting_index = int(parts[2])
    
    meeting = meetings[user_id][meeting_index]
    meeting['tag'] = None if new_tag == 'none' else new_tag
    save_meetings()
    
    tag_emoji = TAGS.get(new_tag, '') if new_tag != 'none' else ''
    bot.answer_callback_query(call.id, f"‚úÖ {tag_emoji} {new_tag.capitalize() if new_tag != 'none' else '–ë–µ–∑ —Ç–µ–≥—É'}")
    
    tag_text = f"\nüè∑Ô∏è {tag_emoji} {new_tag.capitalize()}" if new_tag != 'none' else ""
    
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton('üìÖ –î–∞—Ç—É', callback_data=f'edit_date_{meeting_index}'),
        types.InlineKeyboardButton('üïê –ß–∞—Å', callback_data=f'edit_time_{meeting_index}')
    )
    markup.add(
        types.InlineKeyboardButton('üìù –û–ø–∏—Å', callback_data=f'edit_desc_{meeting_index}'),
        types.InlineKeyboardButton('üè∑Ô∏è –¢–µ–≥', callback_data=f'edit_tag_{meeting_index}')
    )
    markup.add(
        types.InlineKeyboardButton('‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', callback_data=f'edit_remind_{meeting_index}'),
        types.InlineKeyboardButton('üîÅ –ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è', callback_data=f'edit_repeat_{meeting_index}')
    )
    markup.add(
        types.InlineKeyboardButton('‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data='edit_done')
    )
    
    bot.edit_message_text(
        f"‚úÖ –¢–µ–≥ –∑–º—ñ–Ω–µ–Ω–æ!\n\n"
        f"üìÖ {meeting['datetime']}\n"
        f"üìù {meeting['description']}{tag_text}\n\n"
        f"–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è?",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

# –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_remind_'))
def callback_edit_remind(call):
    user_id = str(call.message.chat.id)
    meeting_index = int(call.data.replace('edit_remind_', ''))
    
    meeting = meetings[user_id][meeting_index]
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
    current_reminders = meeting.get('reminder_minutes', [])
    if isinstance(current_reminders, int):
        current_reminders = [current_reminders]
    
    user_states[user_id] = {
        'step': 'edit_reminders',
        'meeting_index': meeting_index,
        'selected_reminders': current_reminders.copy()
    }
    
    markup = types.InlineKeyboardMarkup()
    
    reminders_options = [
        (1440, '‚è∞ 1 –¥–µ–Ω—å'),
        (60, '‚è∞ 1 –≥–æ–¥–∏–Ω–∞'),
        (30, '‚è∞ 30 —Ö–≤–∏–ª–∏–Ω'),
        (10, '‚è∞ 10 —Ö–≤–∏–ª–∏–Ω'),
        (5, '‚è∞ 5 —Ö–≤–∏–ª–∏–Ω')
    ]
    
    for min_val, label in reminders_options:
        if min_val in current_reminders:
            label = f"‚úÖ {label}"
        
        if min_val >= 60:
            markup.add(types.InlineKeyboardButton(label, callback_data=f'editrem_{min_val}_{meeting_index}'))
        else:
            if min_val == 30:
                label_10 = '‚è∞ 10 —Ö–≤–∏–ª–∏–Ω' if 10 not in current_reminders else '‚úÖ ‚è∞ 10 —Ö–≤–∏–ª–∏–Ω'
                markup.row(
                    types.InlineKeyboardButton(label, callback_data=f'editrem_{min_val}_{meeting_index}'),
                    types.InlineKeyboardButton(label_10, callback_data=f'editrem_10_{meeting_index}')
                )
            elif min_val == 10:
                continue
            else:
                markup.add(types.InlineKeyboardButton(label, callback_data=f'editrem_{min_val}_{meeting_index}'))
    
    markup.add(types.InlineKeyboardButton('‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏', callback_data=f'editrem_save_{meeting_index}'))
    markup.add(types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=f'edit_select_{meeting_index}'))
    
    # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    if current_reminders:
        selected_list = []
        for min_val in sorted(current_reminders, reverse=True):
            if min_val >= 1440:
                selected_list.append(f"{min_val // 1440} –¥–µ–Ω—å")
            elif min_val >= 60:
                selected_list.append(f"{min_val // 60} –≥–æ–¥–∏–Ω–∞")
            else:
                selected_list.append(f"{min_val} —Ö–≤")
        selected_text = ", ".join(selected_list)
    else:
        selected_text = "–Ω–µ–º–∞—î"
    
    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        f"‚è∞ –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å\n\n"
        f"–û–±—Ä–∞–Ω–æ: {selected_text}\n\n"
        f"–û–±–µ—Ä–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (–º–æ–∂–Ω–∞ –∫—ñ–ª—å–∫–∞):",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

# –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
@bot.callback_query_handler(func=lambda call: call.data.startswith('editrem_'))
def callback_editrem(call):
    user_id = str(call.message.chat.id)
    parts = call.data.split('_')
    
    if parts[1] == 'save':
        meeting_index = int(parts[2])
        
        if not user_states[user_id]['selected_reminders']:
            bot.answer_callback_query(call.id, "‚ùå –û–±–µ—Ä–∏ —Ö–æ—á–∞ –± –æ–¥–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è!")
            return
        
        meeting = meetings[user_id][meeting_index]
        meeting['reminder_minutes'] = user_states[user_id]['selected_reminders']
        
        # –û–Ω–æ–≤–ª—é—î–º–æ notifications_sent
        notifications_status = {}
        for reminder_min in meeting['reminder_minutes']:
            notifications_status[str(reminder_min)] = False
        meeting['notifications_sent'] = notifications_status
        
        save_meetings()
        
        bot.answer_callback_query(call.id, "‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
        
        tag = meeting.get('tag')
        tag_text = f"\nüè∑Ô∏è {TAGS.get(tag, '')} {tag.capitalize()}" if tag else ""
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Å–ø–∏—Å–æ–∫ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
        reminders_list = []
        for min_val in sorted(meeting['reminder_minutes'], reverse=True):
            if min_val >= 1440:
                reminders_list.append(f"{min_val // 1440}–¥")
            elif min_val >= 60:
                reminders_list.append(f"{min_val // 60}–≥")
            else:
                reminders_list.append(f"{min_val}—Ö–≤")
        
        reminders_text = ", ".join(reminders_list)
        
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton('üìÖ –î–∞—Ç—É', callback_data=f'edit_date_{meeting_index}'),
            types.InlineKeyboardButton('üïê –ß–∞—Å', callback_data=f'edit_time_{meeting_index}')
        )
        markup.add(
            types.InlineKeyboardButton('üìù –û–ø–∏—Å', callback_data=f'edit_desc_{meeting_index}'),
            types.InlineKeyboardButton('üè∑Ô∏è –¢–µ–≥', callback_data=f'edit_tag_{meeting_index}')
        )
        markup.add(
            types.InlineKeyboardButton('‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', callback_data=f'edit_remind_{meeting_index}'),
            types.InlineKeyboardButton('üîÅ –ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è', callback_data=f'edit_repeat_{meeting_index}')
        )
        markup.add(
            types.InlineKeyboardButton('‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data='edit_done')
        )
        
        bot.edit_message_text(
            f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–µ–Ω–æ!\n\n"
            f"üìÖ {meeting['datetime']}\n"
            f"üìù {meeting['description']}{tag_text}\n"
            f"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {reminders_text}\n\n"
            f"–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è?",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )
        
        del user_states[user_id]
        return
    
    reminder_minutes = int(parts[1])
    meeting_index = int(parts[2])
    
    if 'selected_reminders' not in user_states[user_id]:
        meeting = meetings[user_id][meeting_index]
        current_reminders = meeting.get('reminder_minutes', [])
        if isinstance(current_reminders, int):
            current_reminders = [current_reminders]
        user_states[user_id]['selected_reminders'] = current_reminders.copy()
    
    if reminder_minutes in user_states[user_id]['selected_reminders']:
        user_states[user_id]['selected_reminders'].remove(reminder_minutes)
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–∏–±—Ä–∞–Ω–æ")
    else:
        user_states[user_id]['selected_reminders'].append(reminder_minutes)
        bot.answer_callback_query(call.id, "‚úÖ –î–æ–¥–∞–Ω–æ")
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫–∏
    markup = types.InlineKeyboardMarkup()
    
    reminders_options = [
        (1440, '‚è∞ 1 –¥–µ–Ω—å'),
        (60, '‚è∞ 1 –≥–æ–¥–∏–Ω–∞'),
        (30, '‚è∞ 30 —Ö–≤–∏–ª–∏–Ω'),
        (10, '‚è∞ 10 —Ö–≤–∏–ª–∏–Ω'),
        (5, '‚è∞ 5 —Ö–≤–∏–ª–∏–Ω')
    ]
    
    for min_val, label in reminders_options:
        if min_val in user_states[user_id]['selected_reminders']:
            label = f"‚úÖ {label}"
        
        if min_val >= 60:
            markup.add(types.InlineKeyboardButton(label, callback_data=f'editrem_{min_val}_{meeting_index}'))
        else:
            if min_val == 30:
                label_10 = '‚è∞ 10 —Ö–≤–∏–ª–∏–Ω' if 10 not in user_states[user_id]['selected_reminders'] else '‚úÖ ‚è∞ 10 —Ö–≤–∏–ª–∏–Ω'
                markup.row(
                    types.InlineKeyboardButton(label, callback_data=f'editrem_{min_val}_{meeting_index}'),
                    types.InlineKeyboardButton(label_10, callback_data=f'editrem_10_{meeting_index}')
                )
            elif min_val == 10:
                continue
            else:
                markup.add(types.InlineKeyboardButton(label, callback_data=f'editrem_{min_val}_{meeting_index}'))
    
    markup.add(types.InlineKeyboardButton('‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏', callback_data=f'editrem_save_{meeting_index}'))
    markup.add(types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=f'edit_select_{meeting_index}'))
    
    # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
    if user_states[user_id]['selected_reminders']:
        selected_list = []
        for min_val in sorted(user_states[user_id]['selected_reminders'], reverse=True):
            if min_val >= 1440:
                selected_list.append(f"{min_val // 1440} –¥–µ–Ω—å")
            elif min_val >= 60:
                selected_list.append(f"{min_val // 60} –≥–æ–¥–∏–Ω–∞")
            else:
                selected_list.append(f"{min_val} —Ö–≤")
        selected_text = ", ".join(selected_list)
    else:
        selected_text = "–Ω–µ–º–∞—î"
    
    bot.edit_message_text(
        f"‚è∞ –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å\n\n"
        f"–û–±—Ä–∞–Ω–æ: {selected_text}\n\n"
        f"–û–±–µ—Ä–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (–º–æ–∂–Ω–∞ –∫—ñ–ª—å–∫–∞):",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

# –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è
@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_repeat_'))
def callback_edit_repeat(call):
    user_id = str(call.message.chat.id)
    meeting_index = int(call.data.replace('edit_repeat_', ''))
    
    meeting = meetings[user_id][meeting_index]
    current_repeat = meeting.get('repeat', 'none')
    
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton('üìÖ –ù–µ –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏', callback_data=f'editrep_none_{meeting_index}')
    )
    markup.add(
        types.InlineKeyboardButton('üîÅ –©–æ–¥–µ–Ω–Ω–æ', callback_data=f'editrep_daily_{meeting_index}'),
        types.InlineKeyboardButton('üîÅ –©–æ—Ç–∏–∂–Ω—è', callback_data=f'editrep_weekly_{meeting_index}')
    )
    markup.add(
        types.InlineKeyboardButton('üîÅ –©–æ–º—ñ—Å—è—Ü—è', callback_data=f'editrep_monthly_{meeting_index}')
    )
    markup.add(types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=f'edit_select_{meeting_index}'))
    
    repeat_text = {
        'none': '–Ω–µ –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è',
        'daily': '—â–æ–¥–µ–Ω–Ω–æ',
        'weekly': '—â–æ—Ç–∏–∂–Ω—è',
        'monthly': '—â–æ–º—ñ—Å—è—Ü—è'
    }.get(current_repeat, '–Ω–µ –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è')
    
    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        f"üîÅ –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–µ–Ω—å\n\n"
        f"üìù {meeting['description']}\n"
        f"üìÖ {meeting['datetime']}\n\n"
        f"–ó–∞—Ä–∞–∑: {repeat_text}\n\n"
        f"–û–±–µ—Ä–∏ –Ω–æ–≤–∏–π —Ä–µ–∂–∏–º:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

# –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è
@bot.callback_query_handler(func=lambda call: call.data.startswith('editrep_'))
def callback_editrep(call):
    user_id = str(call.message.chat.id)
    parts = call.data.split('_')
    new_repeat = parts[1]
    meeting_index = int(parts[2])
    
    meeting = meetings[user_id][meeting_index]
    meeting['repeat'] = new_repeat
    save_meetings()
    
    repeat_text = {
        'none': '–Ω–µ –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è',
        'daily': '—â–æ–¥–µ–Ω–Ω–æ',
        'weekly': '—â–æ—Ç–∏–∂–Ω—è',
        'monthly': '—â–æ–º—ñ—Å—è—Ü—è'
    }[new_repeat]
    
    bot.answer_callback_query(call.id, f"‚úÖ {repeat_text.capitalize()}")
    
    tag = meeting.get('tag')
    tag_text = f"\nüè∑Ô∏è {TAGS.get(tag, '')} {tag.capitalize()}" if tag else ""
    
    repeat_emoji = " üîÅ" if new_repeat != 'none' else ""
    
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton('üìÖ –î–∞—Ç—É', callback_data=f'edit_date_{meeting_index}'),
        types.InlineKeyboardButton('üïê –ß–∞—Å', callback_data=f'edit_time_{meeting_index}')
    )
    markup.add(
        types.InlineKeyboardButton('üìù –û–ø–∏—Å', callback_data=f'edit_desc_{meeting_index}'),
        types.InlineKeyboardButton('üè∑Ô∏è –¢–µ–≥', callback_data=f'edit_tag_{meeting_index}')
    )
    markup.add(
        types.InlineKeyboardButton('‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', callback_data=f'edit_remind_{meeting_index}'),
        types.InlineKeyboardButton('üîÅ –ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è', callback_data=f'edit_repeat_{meeting_index}')
    )
    markup.add(
        types.InlineKeyboardButton('‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data='edit_done')
    )
    
    bot.edit_message_text(
        f"‚úÖ –ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –∑–º—ñ–Ω–µ–Ω–æ: {repeat_text}!\n\n"
        f"üìÖ {meeting['datetime']}{repeat_emoji}\n"
        f"üìù {meeting['description']}{tag_text}\n\n"
        f"–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è?",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

# –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
@bot.callback_query_handler(func=lambda call: call.data == 'edit_done')
def callback_edit_done(call):
    bot.answer_callback_query(call.id, "‚úÖ –ó–º—ñ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
    bot.edit_message_text(
        "‚úÖ –ó—É—Å—Ç—Ä—ñ—á —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ!\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /list —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –∑—É—Å—Ç—Ä—ñ—á—ñ",
        call.message.chat.id,
        call.message.message_id
    )

# –°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
@bot.callback_query_handler(func=lambda call: call.data == 'edit_cancel')
def callback_edit_cancel(call):
    bot.answer_callback_query(call.id, "‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ")
    bot.edit_message_text(
        "‚ùå –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ",
        call.message.chat.id,
        call.message.message_id
    )

# –ö–æ–º–∞–Ω–¥–∞ /delete
@bot.message_handler(commands=['delete'])
def delete_meeting(message):
    user_id = str(message.chat.id)
    
    if user_id not in meetings or not meetings[user_id]:
        bot.reply_to(message, "üì≠ –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –∑—É—Å—Ç—Ä—ñ—á–µ–π –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
        return
    
    markup = types.InlineKeyboardMarkup()
    
    for i, meeting in enumerate(meetings[user_id]):
        dt = datetime.strptime(meeting['datetime'], "%d.%m.%Y %H:%M")
        tag = meeting.get('tag')
        tag_text = f"{TAGS.get(tag, '')} " if tag else ""
        button_text = f"{tag_text}{dt.strftime('%d.%m %H:%M')} - {meeting['description'][:30]}"
        callback_data = f"delete_{i}"
        markup.add(types.InlineKeyboardButton(button_text, callback_data=callback_data))
    
    bot.reply_to(message, "üóë –û–±–µ—Ä–∏ –∑—É—Å—Ç—Ä—ñ—á –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=markup)

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
def callback_delete(call):
    user_id = str(call.message.chat.id)
    meeting_index = int(call.data.split('_')[1])
    
    if user_id in meetings and meeting_index < len(meetings[user_id]):
        deleted_meeting = meetings[user_id].pop(meeting_index)
        save_meetings()
        
        bot.answer_callback_query(call.id, "‚úÖ –ó—É—Å—Ç—Ä—ñ—á –≤–∏–¥–∞–ª–µ–Ω–æ")
        bot.edit_message_text(
            f"‚úÖ –ó—É—Å—Ç—Ä—ñ—á –≤–∏–¥–∞–ª–µ–Ω–æ:\n\nüìù {deleted_meeting['description']}\nüìÖ {deleted_meeting['datetime']}",
            call.message.chat.id,
            call.message.message_id
        )
    else:
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è")

# –ö–æ–º–∞–Ω–¥–∞ /repeat –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–∏—Ö –∑—É—Å—Ç—Ä—ñ—á–µ–π
@bot.message_handler(commands=['repeat'])
def repeat_command(message):
    user_id = str(message.chat.id)
    
    if user_id not in meetings or not meetings[user_id]:
        bot.reply_to(message, "üì≠ –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –∑—É—Å—Ç—Ä—ñ—á–µ–π –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–µ–Ω—å.\n\n–î–æ–¥–∞–π –∑—É—Å—Ç—Ä—ñ—á –∫–æ–º–∞–Ω–¥–æ—é /add")
        return
    
    markup = types.InlineKeyboardMarkup()
    
    for i, meeting in enumerate(meetings[user_id]):
        dt = datetime.strptime(meeting['datetime'], "%d.%m.%Y %H:%M")
        repeat_status = "üîÅ" if meeting.get('repeat', 'none') != 'none' else "üìÖ"
        button_text = f"{repeat_status} {dt.strftime('%d.%m %H:%M')} - {meeting['description'][:25]}"
        callback_data = f"repeat_select_{i}"
        markup.add(types.InlineKeyboardButton(button_text, callback_data=callback_data))
    
    bot.reply_to(message, "üîÅ –û–±–µ—Ä–∏ –∑—É—Å—Ç—Ä—ñ—á –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–µ–Ω—å:", reply_markup=markup)

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∑—É—Å—Ç—Ä—ñ—á—ñ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω—å
@bot.callback_query_handler(func=lambda call: call.data.startswith('repeat_select_'))
def callback_repeat_select(call):
    user_id = str(call.message.chat.id)
    meeting_index = int(call.data.replace('repeat_select_', ''))
    
    if user_id not in meetings or meeting_index >= len(meetings[user_id]):
        bot.answer_callback_query(call.id, "‚ùå –ó—É—Å—Ç—Ä—ñ—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    meeting = meetings[user_id][meeting_index]
    current_repeat = meeting.get('repeat', 'none')
    
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton('üìÖ –ù–µ –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏', callback_data=f'repeat_none_{meeting_index}')
    )
    markup.add(
        types.InlineKeyboardButton('üîÅ –©–æ–¥–µ–Ω–Ω–æ', callback_data=f'repeat_daily_{meeting_index}'),
        types.InlineKeyboardButton('üîÅ –©–æ—Ç–∏–∂–Ω—è', callback_data=f'repeat_weekly_{meeting_index}')
    )
    markup.add(
        types.InlineKeyboardButton('üîÅ –©–æ–º—ñ—Å—è—Ü—è', callback_data=f'repeat_monthly_{meeting_index}')
    )
    
    repeat_text = {
        'none': '–Ω–µ –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è',
        'daily': '—â–æ–¥–µ–Ω–Ω–æ',
        'weekly': '—â–æ—Ç–∏–∂–Ω—è',
        'monthly': '—â–æ–º—ñ—Å—è—Ü—è'
    }.get(current_repeat, '–Ω–µ –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è')
    
    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        f"üîÅ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–µ–Ω—å\n\nüìù {meeting['description']}\nüìÖ {meeting['datetime']}\n\n–ó–∞—Ä–∞–∑: {repeat_text}\n\n–û–±–µ—Ä–∏ —Ä–µ–∂–∏–º:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

# –û–±—Ä–æ–±–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É –ø–æ–≤—Ç–æ—Ä–µ–Ω—å
@bot.callback_query_handler(func=lambda call: call.data.startswith('repeat_none_') or call.data.startswith('repeat_daily_') or call.data.startswith('repeat_weekly_') or call.data.startswith('repeat_monthly_'))
def callback_set_repeat(call):
    user_id = str(call.message.chat.id)
    parts = call.data.split('_')
    repeat_type = parts[1]
    meeting_index = int(parts[2])
    
    if user_id not in meetings or meeting_index >= len(meetings[user_id]):
        bot.answer_callback_query(call.id, "‚ùå –ó—É—Å—Ç—Ä—ñ—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    meeting = meetings[user_id][meeting_index]
    meeting['repeat'] = repeat_type
    save_meetings()
    
    repeat_text = {
        'none': '–Ω–µ –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è',
        'daily': '—â–æ–¥–µ–Ω–Ω–æ',
        'weekly': '—â–æ—Ç–∏–∂–Ω—è',
        'monthly': '—â–æ–º—ñ—Å—è—Ü—è'
    }[repeat_type]
    
    emoji = "üìÖ" if repeat_type == 'none' else "üîÅ"
    
    bot.answer_callback_query(call.id, f"‚úÖ {repeat_text.capitalize()}")
    bot.edit_message_text(
        f"{emoji} –ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ: {repeat_text}\n\nüìù {meeting['description']}\nüìÖ {meeting['datetime']}",
        call.message.chat.id,
        call.message.message_id
    )

# –ö–æ–º–∞–Ω–¥–∞ /deleteall –¥–ª—è –º–∞—Å–æ–≤–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
@bot.message_handler(commands=['deleteall'])
def deleteall_command(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton('üìÖ –ó–∞ –¥–∞—Ç–æ—é', callback_data='delall_date'),
        types.InlineKeyboardButton('üìù –ó–∞ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º', callback_data='delall_keyword')
    )
    markup.add(
        types.InlineKeyboardButton('üè∑Ô∏è –ó–∞ —Ç–µ–≥–æ–º', callback_data='delall_tag')
    )
    markup.add(
        types.InlineKeyboardButton('üìÜ –ó–∞ —Ç–∏–∂–¥–µ–Ω—å', callback_data='delall_week'),
        types.InlineKeyboardButton('üìÜ –ó–∞ –º—ñ—Å—è—Ü—å', callback_data='delall_month')
    )
    markup.add(
        types.InlineKeyboardButton('üóë –í—Å—ñ –∑—É—Å—Ç—Ä—ñ—á—ñ', callback_data='delall_all')
    )
    
    bot.reply_to(message, "üóë –ú–∞—Å–æ–≤–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑—É—Å—Ç—Ä—ñ—á–µ–π\n\n–û–±–µ—Ä–∏ —Å–ø–æ—Å—ñ–±:", reply_markup=markup)

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Å–ø–æ—Å–æ–±—É –≤–∏–¥–∞–ª–µ–Ω–Ω—è
@bot.callback_query_handler(func=lambda call: call.data.startswith('delall_'))
def callback_deleteall(call):
    user_id = str(call.message.chat.id)
    delete_type = call.data.replace('delall_', '')
    
    if delete_type == 'date':
        bot.answer_callback_query(call.id)
        bot.edit_message_text(
            "üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑—É—Å—Ç—Ä—ñ—á–µ–π —É —Ü–µ–π –¥–µ–Ω—å\n\n–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–†–†–†–†\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 20.10.2025",
            call.message.chat.id,
            call.message.message_id
        )
        user_states[user_id] = {'step': 'deleteall_date'}
        
    elif delete_type == 'keyword':
        bot.answer_callback_query(call.id)
        bot.edit_message_text(
            "üìù –í–≤–µ–¥–∏ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ\n\n–ë—É–¥—É—Ç—å –≤–∏–¥–∞–ª–µ–Ω—ñ –≤—Å—ñ –∑—É—Å—Ç—Ä—ñ—á—ñ, —â–æ –º—ñ—Å—Ç—è—Ç—å —Ü–µ —Å–ª–æ–≤–æ\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –†–æ–±–æ—Ç–∞",
            call.message.chat.id,
            call.message.message_id
        )
        user_states[user_id] = {'step': 'deleteall_keyword'}
        
    elif delete_type == 'tag':
        markup = types.InlineKeyboardMarkup(row_width=2)
        tag_buttons = [
            types.InlineKeyboardButton(f"{emoji} {tag.capitalize()}", callback_data=f'deltag_{tag}')
            for tag, emoji in TAGS.items()
        ]
        
        for i in range(0, len(tag_buttons), 2):
            markup.add(*tag_buttons[i:i+2])
        
        bot.answer_callback_query(call.id)
        bot.edit_message_text(
            "üè∑Ô∏è –û–±–µ—Ä–∏ —Ç–µ–≥ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑—É—Å—Ç—Ä—ñ—á–µ–π –∑ —Ü–∏–º —Ç–µ–≥–æ–º:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )
        
    elif delete_type == 'week':
        if user_id not in meetings or not meetings[user_id]:
            bot.answer_callback_query(call.id, "üì≠ –ù–µ–º–∞—î –∑—É—Å—Ç—Ä—ñ—á–µ–π")
            return
        
        user_now = get_user_time(user_id)
        week_end = user_now + timedelta(days=7)
        
        original_count = len(meetings[user_id])
        meetings[user_id] = [
            m for m in meetings[user_id]
            if not (user_now <= datetime.strptime(m['datetime'], "%d.%m.%Y %H:%M") <= week_end)
        ]
        
        deleted_count = original_count - len(meetings[user_id])
        save_meetings()
        
        bot.answer_callback_query(call.id, f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ: {deleted_count}")
        bot.edit_message_text(
            f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –≤—Å—ñ –∑—É—Å—Ç—Ä—ñ—á—ñ –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á–∏–π —Ç–∏–∂–¥–µ–Ω—å\n\n–í–∏–¥–∞–ª–µ–Ω–æ –∑—É—Å—Ç—Ä—ñ—á–µ–π: {deleted_count}",
            call.message.chat.id,
            call.message.message_id
        )
        
    elif delete_type == 'month':
        if user_id not in meetings or not meetings[user_id]:
            bot.answer_callback_query(call.id, "üì≠ –ù–µ–º–∞—î –∑—É—Å—Ç—Ä—ñ—á–µ–π")
            return
        
        user_now = get_user_time(user_id)
        month_end = user_now + timedelta(days=30)
        
        original_count = len(meetings[user_id])
        meetings[user_id] = [
            m for m in meetings[user_id]
            if not (user_now <= datetime.strptime(m['datetime'], "%d.%m.%Y %H:%M") <= month_end)
        ]
        
        deleted_count = original_count - len(meetings[user_id])
        save_meetings()
        
        bot.answer_callback_query(call.id, f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ: {deleted_count}")
        bot.edit_message_text(
            f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –≤—Å—ñ –∑—É—Å—Ç—Ä—ñ—á—ñ –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á–∏–π –º—ñ—Å—è—Ü—å\n\n–í–∏–¥–∞–ª–µ–Ω–æ –∑—É—Å—Ç—Ä—ñ—á–µ–π: {deleted_count}",
            call.message.chat.id,
            call.message.message_id
        )
        
    elif delete_type == 'all':
        if user_id not in meetings or not meetings[user_id]:
            bot.answer_callback_query(call.id, "üì≠ –ù–µ–º–∞—î –∑—É—Å—Ç—Ä—ñ—á–µ–π")
            return
        
        count = len(meetings[user_id])
        meetings[user_id] = []
        save_meetings()
        
        bot.answer_callback_query(call.id, f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ: {count}")
        bot.edit_message_text(
            f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –í–°–Ü –∑—É—Å—Ç—Ä—ñ—á—ñ\n\n–í–∏–¥–∞–ª–µ–Ω–æ –∑—É—Å—Ç—Ä—ñ—á–µ–π: {count}",
            call.message.chat.id,
            call.message.message_id
        )

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞ —Ç–µ–≥–æ–º
@bot.callback_query_handler(func=lambda call: call.data.startswith('deltag_'))
def callback_delete_by_tag(call):
    user_id = str(call.message.chat.id)
    tag = call.data.replace('deltag_', '')
    
    if user_id not in meetings or not meetings[user_id]:
        bot.answer_callback_query(call.id, "üì≠ –ù–µ–º–∞—î –∑—É—Å—Ç—Ä—ñ—á–µ–π")
        return
    
    original_count = len(meetings[user_id])
    meetings[user_id] = [m for m in meetings[user_id] if m.get('tag') != tag]
    
    deleted_count = original_count - len(meetings[user_id])
    save_meetings()
    
    tag_emoji = TAGS.get(tag, '')
    bot.answer_callback_query(call.id, f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ: {deleted_count}")
    bot.edit_message_text(
        f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –≤—Å—ñ –∑—É—Å—Ç—Ä—ñ—á—ñ –∑ —Ç–µ–≥–æ–º {tag_emoji} {tag.capitalize()}\n\n–í–∏–¥–∞–ª–µ–Ω–æ –∑—É—Å—Ç—Ä—ñ—á–µ–π: {deleted_count}",
        call.message.chat.id,
        call.message.message_id
    )

# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞—Ç–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
@bot.message_handler(func=lambda message: str(message.chat.id) in user_states and user_states[str(message.chat.id)].get('step') == 'deleteall_date')
def process_deleteall_date(message):
    user_id = str(message.chat.id)
    
    try:
        date_obj = datetime.strptime(message.text, '%d.%m.%Y')
        date_str = date_obj.strftime('%d.%m.%Y')
        
        if user_id not in meetings or not meetings[user_id]:
            bot.send_message(message.chat.id, "üì≠ –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –∑—É—Å—Ç—Ä—ñ—á–µ–π –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
            del user_states[user_id]
            return
        
        original_count = len(meetings[user_id])
        meetings[user_id] = [
            m for m in meetings[user_id]
            if not m['datetime'].startswith(date_str)
        ]
        
        deleted_count = original_count - len(meetings[user_id])
        save_meetings()
        
        bot.send_message(message.chat.id, f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –≤—Å—ñ –∑—É—Å—Ç—Ä—ñ—á—ñ –Ω–∞ {date_str}\n\n–í–∏–¥–∞–ª–µ–Ω–æ –∑—É—Å—Ç—Ä—ñ—á–µ–π: {deleted_count}")
        del user_states[user_id]
        
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏!\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π: –î–î.–ú–ú.–†–†–†–†\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 20.10.2025")

# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
@bot.message_handler(func=lambda message: str(message.chat.id) in user_states and user_states[str(message.chat.id)].get('step') == 'deleteall_keyword')
def process_deleteall_keyword(message):
    user_id = str(message.chat.id)
    keyword = message.text.lower()
    
    if user_id not in meetings or not meetings[user_id]:
        bot.send_message(message.chat.id, "üì≠ –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –∑—É—Å—Ç—Ä—ñ—á–µ–π –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
        del user_states[user_id]
        return
    
    original_count = len(meetings[user_id])
    meetings[user_id] = [
        m for m in meetings[user_id]
        if keyword not in m['description'].lower()
    ]
    
    deleted_count = original_count - len(meetings[user_id])
    save_meetings()
    
    bot.send_message(message.chat.id, f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –≤—Å—ñ –∑—É—Å—Ç—Ä—ñ—á—ñ —â–æ –º—ñ—Å—Ç—è—Ç—å '{message.text}'\n\n–í–∏–¥–∞–ª–µ–Ω–æ –∑—É—Å—Ç—Ä—ñ—á–µ–π: {deleted_count}")
    del user_states[user_id]

# –ö–æ–º–∞–Ω–¥–∞ /stats –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@bot.message_handler(commands=['stats'])
def stats_command(message):
    user_id = str(message.chat.id)
    
    has_history = user_id in meetings_history and meetings_history[user_id]
    has_upcoming = user_id in meetings and meetings[user_id]
    
    if not has_history and not has_upcoming:
        bot.reply_to(message, "üì≠ –£ —Ç–µ–±–µ –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑—É—Å—Ç—Ä—ñ—á–µ–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n\n–î–æ–¥–∞–π –∑—É—Å—Ç—Ä—ñ—á—ñ –∫–æ–º–∞–Ω–¥–æ—é /add")
        return
    
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton('üìä –ó–∞ —Ç–∏–∂–¥–µ–Ω—å', callback_data='stats_week'),
        types.InlineKeyboardButton('üìä –ó–∞ –º—ñ—Å—è—Ü—å', callback_data='stats_month')
    )
    markup.add(
        types.InlineKeyboardButton('üìä –ó–∞ –≤–µ—Å—å —á–∞—Å', callback_data='stats_all')
    )
    
    bot.reply_to(message, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑—É—Å—Ç—Ä—ñ—á–µ–π\n\n–û–±–µ—Ä–∏ –ø–µ—Ä—ñ–æ–¥:", reply_markup=markup)

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('stats_'))
def callback_stats(call):
    user_id = str(call.message.chat.id)
    period = call.data.replace('stats_', '')
    
    if user_id not in meetings_history or not meetings_history[user_id]:
        if user_id not in meetings or not meetings[user_id]:
            bot.answer_callback_query(call.id, "üì≠ –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö")
            return
    
    user_now = get_user_time(user_id)
    tz = get_user_timezone(user_id)
    tz_str = get_timezone_string(tz)
    
    if period == 'week':
        start_date = user_now - timedelta(days=7)
        period_name = "–∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å"
    elif period == 'month':
        start_date = user_now - timedelta(days=30)
        period_name = "–∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å"
    else:
        start_date = datetime(2000, 1, 1)
        period_name = "–∑–∞ –≤–µ—Å—å —á–∞—Å"
    
    period_meetings = []
    if user_id in meetings_history:
        period_meetings = [
            m for m in meetings_history[user_id]
            if datetime.strptime(m['datetime'], "%d.%m.%Y %H:%M") >= start_date
        ]
    
    total_completed = sum(1 for m in period_meetings if m.get('auto_completed', False))
    
    upcoming_meetings = []
    if user_id in meetings:
        if period == 'week':
            end_date = user_now + timedelta(days=7)
        elif period == 'month':
            end_date = user_now + timedelta(days=30)
        else:
            end_date = datetime(2100, 1, 1)
        
        upcoming_meetings = [
            m for m in meetings[user_id]
            if user_now <= datetime.strptime(m['datetime'], "%d.%m.%Y %H:%M") <= end_date
        ]
    
    total_upcoming = len(upcoming_meetings)
    
    if not period_meetings and not upcoming_meetings:
        bot.answer_callback_query(call.id, "üì≠ –ù–µ–º–∞—î –∑—É—Å—Ç—Ä—ñ—á–µ–π –∑–∞ —Ü–µ–π –ø–µ—Ä—ñ–æ–¥")
        bot.edit_message_text(
            f"üì≠ –ù–µ–º–∞—î –∑—É—Å—Ç—Ä—ñ—á–µ–π {period_name}",
            call.message.chat.id,
            call.message.message_id
        )
        return
    
    descriptions = [m['description'] for m in period_meetings]
    description_counter = Counter(descriptions)
    top_descriptions = description_counter.most_common(3)
    
    morning = 0
    afternoon = 0
    evening = 0
    night = 0
    
    for m in period_meetings:
        hour = int(m['datetime'].split()[1].split(':')[0])
        if 6 <= hour < 12:
            morning += 1
        elif 12 <= hour < 18:
            afternoon += 1
        elif 18 <= hour < 24:
            evening += 1
        else:
            night += 1
    
    weekday_stats = {0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0}
    weekday_names = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–ù–¥']
    
    for m in period_meetings:
        dt = datetime.strptime(m['datetime'], "%d.%m.%Y %H:%M")
        weekday = dt.weekday()
        weekday_stats[weekday] += 1
    
    response = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {period_name}**\n"
    response += f"üåç {tz_str}\n\n"
    
    response += "**üìà –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
    response += f"‚Ä¢ üìÖ –ú–∞–π–±—É—Ç–Ω—ñ –∑—É—Å—Ç—Ä—ñ—á—ñ: {total_upcoming}\n"
    response += f"‚Ä¢ ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω—ñ –∑—É—Å—Ç—Ä—ñ—á—ñ: {total_completed}\n\n"
    
    if top_descriptions:
        response += "**üè∑Ô∏è –ù–∞–π—á–∞—Å—Ç—ñ—à—ñ —Ç–µ–º–∏:**\n"
        for desc, count in top_descriptions:
            display_desc = desc if len(desc) <= 40 else desc[:37] + "..."
            response += f"‚Ä¢ {display_desc}: {count} —Ä–∞–∑\n"
        response += "\n"
    
    if period_meetings:
        response += "**‚è∞ –†–æ–∑–ø–æ–¥—ñ–ª –∑–∞ —á–∞—Å–æ–º –¥–æ–±–∏:**\n"
        response += f"‚Ä¢ üåÖ –†–∞–Ω–æ–∫ (6-12): {morning} –∑—É—Å—Ç—Ä—ñ—á–µ–π\n"
        response += f"‚Ä¢ ‚òÄÔ∏è –î–µ–Ω—å (12-18): {afternoon} –∑—É—Å—Ç—Ä—ñ—á–µ–π\n"
        response += f"‚Ä¢ üåÜ –í–µ—á—ñ—Ä (18-24): {evening} –∑—É—Å—Ç—Ä—ñ—á–µ–π\n"
        response += f"‚Ä¢ üåô –ù—ñ—á (0-6): {night} –∑—É—Å—Ç—Ä—ñ—á–µ–π\n\n"
        
        response += "**üìä –ì—Ä–∞—Ñ—ñ–∫ –ø–æ –¥–Ω—è—Ö —Ç–∏–∂–Ω—è:**\n"
        max_count = max(weekday_stats.values()) if weekday_stats.values() else 1
        for day_num, count in weekday_stats.items():
            day_name = weekday_names[day_num]
            bars = '‚ñà' * int((count / max_count * 10)) if max_count > 0 else ''
            response += f"{day_name}: {bars} {count}\n"
        
        if weekday_stats.values() and max(weekday_stats.values()) > 0:
            most_productive_day = weekday_names[max(weekday_stats, key=weekday_stats.get)]
            response += f"\nüèÜ –ù–∞–π–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—à–∏–π –¥–µ–Ω—å: **{most_productive_day}**"
    
    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        response,
        call.message.chat.id,
        call.message.message_id,
        parse_mode='Markdown'
    )

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥—ñ–π –∑ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è–º–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('action_'))
def callback_meeting_action(call):
    user_id = str(call.message.chat.id)
    action_parts = call.data.split('_')
    action_type = action_parts[1]
    meeting_index = int(action_parts[2])
    
    if action_type == 'reschedule':
        if user_id in meetings and meeting_index < len(meetings[user_id]):
            meeting = meetings[user_id][meeting_index]
            
            current_datetime = datetime.strptime(meeting['datetime'], "%d.%m.%Y %H:%M")
            
            new_datetime = current_datetime + timedelta(days=1)
            meeting['datetime'] = new_datetime.strftime("%d.%m.%Y %H:%M")
            
            meeting['notified_before'] = False
            meeting['notified_now'] = False
            
            if 'notifications_sent' in meeting:
                for key in meeting['notifications_sent']:
                    meeting['notifications_sent'][key] = False
            
            save_meetings()
            
            bot.answer_callback_query(call.id, "‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
            bot.edit_message_text(
                f"üîÅ –ó—É—Å—Ç—Ä—ñ—á –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞!\n\nüìù {meeting['description']}\nüìÖ {meeting['datetime']}",
                call.message.chat.id,
                call.message.message_id
            )
        else:
            bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è")
    
    elif action_type == 'ok':
        if user_id in meetings and meeting_index < len(meetings[user_id]):
            meetings[user_id][meeting_index]['completed'] = True
            save_meetings()
        
        bot.answer_callback_query(call.id, "‚úÖ OK")
        bot.edit_message_text(
            f"{call.message.text}\n\n‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ!",
            call.message.chat.id,
            call.message.message_id
        )
    
    elif action_type == 'del':
        if user_id in meetings and meeting_index < len(meetings[user_id]):
            deleted_meeting = meetings[user_id].pop(meeting_index)
            save_meetings()
            
            bot.answer_callback_query(call.id, "‚úÖ –ó—É—Å—Ç—Ä—ñ—á –≤–∏–¥–∞–ª–µ–Ω–æ")
            bot.edit_message_text(
                f"üóë –ó—É—Å—Ç—Ä—ñ—á –≤–∏–¥–∞–ª–µ–Ω–æ!\n\nüìù {deleted_meeting['description']}\nüìÖ {deleted_meeting['datetime']}",
                call.message.chat.id,
                call.message.message_id
            )
        else:
            bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è")

# –§–æ–Ω–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
def send_reminders():
    while True:
        try:
            clean_old_meetings()
            
            for user_id, user_meetings in meetings.items():
                user_now = get_user_time(user_id)
                tz = get_user_timezone(user_id)
                tz_str = get_timezone_string(tz)
                
                for meeting_index, meeting in enumerate(user_meetings):
                    meeting_time = datetime.strptime(meeting['datetime'], "%d.%m.%Y %H:%M")
                    time_diff = (meeting_time - user_now).total_seconds()
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Å–ø–∏—Å–æ–∫ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å (–Ω–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç) –∞–±–æ –æ–¥–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (—Å—Ç–∞—Ä–∏–π —Ñ–æ—Ä–º–∞—Ç)
                    reminder_minutes_list = meeting.get('reminder_minutes')
                    
                    # –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É (–æ–¥–Ω–µ —á–∏—Å–ª–æ)
                    if isinstance(reminder_minutes_list, int):
                        reminder_minutes_list = [reminder_minutes_list]
                        meeting['reminder_minutes'] = reminder_minutes_list
                        meeting['notifications_sent'] = {str(reminder_minutes_list[0]): False}
                        save_meetings()
                    
                    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ notifications_sent —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
                    if 'notifications_sent' not in meeting:
                        meeting['notifications_sent'] = {}
                        for reminder_min in reminder_minutes_list:
                            meeting['notifications_sent'][str(reminder_min)] = False
                        save_meetings()
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
                    for reminder_minutes in reminder_minutes_list:
                        reminder_seconds = reminder_minutes * 60
                        reminder_key = str(reminder_minutes)
                        
                        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è, —è–∫—â–æ —á–∞—Å –ø—ñ–¥—ñ–π—à–æ–≤ —ñ –≤–æ–Ω–æ —â–µ –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ
                        if not meeting['notifications_sent'].get(reminder_key, False) and 0 < time_diff <= reminder_seconds:
                            markup = types.InlineKeyboardMarkup()
                            markup.add(
                                types.InlineKeyboardButton('üîÅ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞', callback_data=f'action_reschedule_{meeting_index}')
                            )
                            markup.add(
                                types.InlineKeyboardButton('‚úÖ OK', callback_data=f'action_ok_{meeting_index}'),
                                types.InlineKeyboardButton('üóë –í–∏–¥–∞–ª–∏—Ç–∏', callback_data=f'action_del_{meeting_index}')
                            )
                            
                            tag = meeting.get('tag')
                            tag_text = f"\nüè∑Ô∏è {TAGS.get(tag, '')} {tag.capitalize()}" if tag else ""
                            
                            # –§–æ—Ä–º–∞—Ç—É—î–º–æ —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
                            if reminder_minutes >= 1440:
                                time_text = f"{reminder_minutes // 1440} –¥–µ–Ω—å"
                            elif reminder_minutes >= 60:
                                time_text = f"{reminder_minutes // 60} –≥–æ–¥–∏–Ω–∞"
                            else:
                                time_text = f"{reminder_minutes} —Ö–≤–∏–ª–∏–Ω"
                            
                            reminder_text = f"‚è∞ –ù–ê–ì–ê–î–£–í–ê–ù–ù–Ø!\n\nüìù {meeting['description']}{tag_text}\nüïê –ß–µ—Ä–µ–∑ {time_text}\nüìÖ {meeting['datetime']}\nüåç {tz_str}"
                            bot.send_message(int(user_id), reminder_text, reply_markup=markup)
                            
                            meeting['notifications_sent'][reminder_key] = True
                            save_meetings()
                    
                    # –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —É –≤–∫–∞–∑–∞–Ω–∏–π —á–∞—Å
                    if not meeting.get('notified_now', False) and -60 <= time_diff <= 0:
                        tag = meeting.get('tag')
                        tag_text = f"\nüè∑Ô∏è {TAGS.get(tag, '')} {tag.capitalize()}" if tag else ""
                        
                        reminder_text = f"üîî –ó–£–°–¢–†–Ü–ß –ü–û–ß–ê–õ–ê–°–¨!\n\nüìù {meeting['description']}{tag_text}\nüïê {meeting['datetime']}\nüåç {tz_str}\n\n‚è∞ –°–∞–º–µ —á–∞—Å!"
                        bot.send_message(int(user_id), reminder_text)
                        meeting['notified_now'] = True
                        
                        repeat_type = meeting.get('repeat', 'none')
                        if repeat_type != 'none':
                            meeting_time = datetime.strptime(meeting['datetime'], "%d.%m.%Y %H:%M")
                            
                            if repeat_type == 'daily':
                                new_time = meeting_time + timedelta(days=1)
                            elif repeat_type == 'weekly':
                                new_time = meeting_time + timedelta(weeks=1)
                            elif repeat_type == 'monthly':
                                new_time = meeting_time + timedelta(days=30)
                            
                            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                            new_notifications_status = {}
                            for reminder_min in reminder_minutes_list:
                                new_notifications_status[str(reminder_min)] = False
                            
                            new_meeting = {
                                "datetime": new_time.strftime("%d.%m.%Y %H:%M"),
                                "description": meeting['description'],
                                "notified_before": False,
                                "notified_now": False,
                                "reminder_minutes": reminder_minutes_list,
                                "notifications_sent": new_notifications_status,
                                "repeat": repeat_type,
                                "completed": False,
                                "tag": meeting.get('tag')
                            }
                            
                            user_meetings.append(new_meeting)
                        
                        save_meetings()
            
            time.sleep(30)
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –≤ send_reminders: {e}")
            time.sleep(30)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    load_meetings()
    load_settings()
    load_history()
    
    reminder_thread = threading.Thread(target=send_reminders, daemon=True)
    reminder_thread.start()
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    bot.infinity_polling()